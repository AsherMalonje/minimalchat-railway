{"file_contents":{"README.md":{"content":"# MinimalChat - Railway.app Deployment Guide\n\nA modern, real-time messaging application with Google OAuth authentication, built for Railway.app and Supabase.\n\n## Features\n\n- üîê **Google OAuth Authentication** - Secure sign-in with Google accounts\n- üí¨ **Real-time Messaging** - Instant messaging with auto-refresh\n- üëª **Whisper Mode** - Self-destructing messages after 10 seconds\n- üé® **Custom Themes** - Personalized chat bubble colors and dark/light modes\n- üì± **Responsive Design** - Works on desktop and mobile\n- ‚ö° **Typing Indicators** - See when someone is typing\n- üü¢ **Online Status** - Real-time presence indicators\n\n## Tech Stack\n\n- **Frontend**: React 18, TypeScript, Tailwind CSS, shadcn/ui\n- **Backend**: Express.js, Passport.js (Google OAuth)\n- **Database**: PostgreSQL (Supabase)\n- **Deployment**: Railway.app\n- **ORM**: Drizzle ORM\n\n## Deployment Instructions\n\n### 1. Setup Supabase Database\n\n1. Go to [supabase.com](https://supabase.com) and create a new project\n2. Once created, go to Settings ‚Üí Database\n3. Copy the **Connection string** (URI format)\n4. Replace `[YOUR-PASSWORD]` with your database password\n\n### 2. Setup Google OAuth\n\n1. Go to [Google Cloud Console](https://console.cloud.google.com/)\n2. Create a new project or select existing\n3. Enable the Google+ API\n4. Go to Credentials ‚Üí Create Credentials ‚Üí OAuth 2.0 Client IDs\n5. Application type: Web application\n6. Authorized redirect URIs: `https://your-app-name.up.railway.app/api/auth/google/callback`\n7. Copy Client ID and Client Secret\n\n### 3. Deploy to Railway.app\n\n1. Fork this repository to your GitHub account\n2. Go to [railway.app](https://railway.app) and sign up\n3. Click \"New Project\" ‚Üí \"Deploy from GitHub repo\"\n4. Select your forked repository\n5. Railway will automatically detect the Node.js app\n\n### 4. Configure Environment Variables\n\nIn Railway dashboard, go to your project ‚Üí Variables tab and add:\n\n```\nDATABASE_URL=postgresql://postgres:[password]@[host]:5432/postgres\nGOOGLE_CLIENT_ID=your_google_client_id_here\nGOOGLE_CLIENT_SECRET=your_google_client_secret_here\nSESSION_SECRET=your_very_long_random_session_secret_here\nNODE_ENV=production\n```\n\n### 5. Update Google OAuth Redirect URI\n\nAfter Railway deployment:\n1. Copy your Railway app URL (e.g., `https://your-app-name.up.railway.app`)\n2. Go back to Google Cloud Console ‚Üí Credentials\n3. Edit your OAuth 2.0 Client ID\n4. Update Authorized redirect URIs to: `https://your-app-name.up.railway.app/api/auth/google/callback`\n\n### 6. Initialize Database\n\nRailway will automatically run `npm run db:push` during deployment to set up your database tables.\n\n## Local Development\n\n1. Clone the repository:\n```bash\ngit clone <your-repo-url>\ncd minimalchat\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Copy environment variables:\n```bash\ncp .env.example .env\n```\n\n4. Fill in your `.env` file with:\n   - Supabase DATABASE_URL\n   - Google OAuth credentials\n   - Random SESSION_SECRET\n\n5. Initialize database:\n```bash\nnpm run db:push\n```\n\n6. Start development server:\n```bash\nnpm run dev\n```\n\nVisit `http://localhost:5000` to see your app.\n\n## Project Structure\n\n```\n‚îú‚îÄ‚îÄ client/               # React frontend\n‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/   # Reusable UI components\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/        # Page components\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/        # Custom React hooks\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ lib/          # Utilities and configs\n‚îú‚îÄ‚îÄ server/               # Express backend\n‚îÇ   ‚îú‚îÄ‚îÄ googleAuth.ts     # Google OAuth setup\n‚îÇ   ‚îú‚îÄ‚îÄ routes.ts         # API routes\n‚îÇ   ‚îú‚îÄ‚îÄ storage.ts        # Database operations\n‚îÇ   ‚îî‚îÄ‚îÄ db.ts            # Database connection\n‚îú‚îÄ‚îÄ shared/\n‚îÇ   ‚îî‚îÄ‚îÄ schema.ts        # Shared TypeScript types\n‚îî‚îÄ‚îÄ deployment files     # Railway, Docker configs\n```\n\n## Database Schema\n\nThe app automatically creates these tables:\n- `users` - User profiles and preferences\n- `chats` - One-to-one conversations\n- `messages` - Chat messages with whisper mode\n- `typing_indicators` - Real-time typing status\n- `sessions` - Authentication sessions\n\n## Environment Variables\n\n| Variable | Description | Required |\n|----------|-------------|----------|\n| `DATABASE_URL` | Supabase PostgreSQL connection string | Yes |\n| `GOOGLE_CLIENT_ID` | Google OAuth Client ID | Yes |\n| `GOOGLE_CLIENT_SECRET` | Google OAuth Client Secret | Yes |\n| `SESSION_SECRET` | Random string for session encryption | Yes |\n| `NODE_ENV` | Set to \"production\" for Railway | Yes |\n| `PORT` | Port number (Railway sets automatically) | No |\n\n## Support\n\nIf you encounter issues:\n\n1. **Database Connection**: Verify your DATABASE_URL is correct\n2. **Google OAuth**: Check redirect URIs match your deployment URL\n3. **Environment Variables**: Ensure all required variables are set in Railway\n4. **Build Issues**: Check Railway build logs for specific errors\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Test locally\n5. Submit a pull request\n\n## License\n\nMIT License - feel free to use this project for personal or commercial purposes.","size_bytes":5133},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# MinimalChat Application\n\n## Overview\n\nMinimalChat is a modern, real-time messaging application built with a full-stack TypeScript architecture. The application features a React frontend with Tailwind CSS and shadcn/ui components, an Express.js backend, and PostgreSQL database with Drizzle ORM. It includes authentication via Google OAuth, real-time messaging capabilities, whisper messages with auto-expiration, typing indicators, and customizable user profiles. The application is now configured for deployment on Railway.app with Supabase as the database provider.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nDeployment preference: Railway.app with Supabase database and Google OAuth authentication.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Bundler**: Vite for development and production builds\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state management\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Runtime**: Node.js with ESM modules\n- **Authentication**: Passport.js with OpenID Connect (Replit OIDC)\n- **Session Management**: Express sessions with PostgreSQL storage\n- **API Design**: RESTful endpoints with JSON responses\n- **Error Handling**: Centralized error middleware\n\n### Database Architecture\n- **Database**: PostgreSQL with Supabase (node-postgres driver)\n- **ORM**: Drizzle ORM with TypeScript-first schema definitions\n- **Migration Strategy**: Schema-first with drizzle-kit for migrations\n- **Connection Management**: Direct PostgreSQL client connection\n\n## Key Components\n\n### Authentication System\n- **Provider**: Google OAuth 2.0 integration for secure authentication\n- **Session Storage**: PostgreSQL-backed sessions with configurable TTL\n- **Middleware**: Route-level authentication guards with Passport.js\n- **User Management**: Automatic user creation/updates on login\n\n### Real-time Messaging\n- **Message Types**: Text messages and voice message placeholders\n- **Whisper Messages**: Auto-expiring messages with special styling\n- **Typing Indicators**: Real-time typing status with cleanup mechanisms\n- **Message Status**: Read receipts and delivery confirmation\n\n### User Experience Features\n- **Theme Support**: Light/dark mode with system preference detection\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n- **Color Customization**: User-selectable color tags for personalization\n- **Online Status**: Real-time user presence indicators\n\n### Data Models\n- **Users**: Profile information, online status, preferences\n- **Messages**: Content, type, whisper status, timestamps\n- **Chats**: One-to-one conversations between users\n- **Sessions**: Authentication session persistence\n- **Typing Indicators**: Temporary typing status tracking\n\n## Data Flow\n\n### Authentication Flow\n1. User visits landing page\n2. Clicks sign-in, redirected to Google OAuth\n3. User authenticates with Google account\n4. Google returns user profile information\n5. Backend creates/updates user in database\n6. User session created and stored in PostgreSQL\n7. User redirected to main application\n\n### Messaging Flow\n1. User types message in input component\n2. Typing indicator sent to other participants\n3. Message submitted via API to backend\n4. Message validated and stored in database\n5. Real-time polling updates chat interface\n6. Message bubbles rendered with appropriate styling\n\n### Profile Management\n1. User accesses profile page\n2. Form pre-populated with current user data\n3. Changes submitted to update API endpoint\n4. Database updated with new profile information\n5. UI reflects changes immediately\n\n## External Dependencies\n\n### Core Dependencies\n- **React Ecosystem**: React, React DOM, React Query\n- **UI Framework**: Radix UI primitives, Tailwind CSS\n- **Backend**: Express.js, Passport.js, Drizzle ORM\n- **Database**: PostgreSQL via Neon serverless driver\n- **Validation**: Zod for runtime type checking\n- **Date Handling**: date-fns for formatting and manipulation\n\n### Development Tools\n- **Build System**: Vite with TypeScript support\n- **Code Quality**: TypeScript strict mode, ESLint configuration\n- **Development Experience**: Hot module replacement, error overlays\n- **Replit Integration**: Cartographer plugin, runtime error modals\n\n### Authentication Dependencies\n- **Google OAuth**: passport-google-oauth20 for OAuth integration\n- **Session Management**: express-session, connect-pg-simple, passport.js\n- **Security**: Secure session cookies, CSRF protection\n\n## Deployment Strategy\n\n### Build Process\n1. Frontend built with Vite to static assets\n2. Backend bundled with esbuild for Node.js\n3. Database schema applied via drizzle-kit\n4. Environment variables configured for production\n\n### Environment Configuration\n- **Database**: DATABASE_URL for Supabase PostgreSQL connection\n- **Authentication**: GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET for OAuth\n- **Sessions**: SESSION_SECRET for secure session encryption\n- **Runtime**: NODE_ENV for environment-specific behavior\n- **Deployment**: PORT for Railway.app hosting\n\n### Production Considerations\n- Static file serving handled by Express in production\n- Database migrations managed through drizzle-kit commands\n- Session cleanup and whisper message expiration via scheduled tasks\n- Error logging and monitoring through application middleware\n\n### Development vs Production\n- Development uses Vite dev server with HMR\n- Production serves pre-built static files\n- Development includes Replit-specific tooling and debugging\n- Production optimizes for performance and security","size_bytes":5864},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Client } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\n// Make database optional in development - prefer MemStorage per guidelines\nlet client: Client | undefined;\nlet db: ReturnType<typeof drizzle> | undefined;\n\nif (process.env.DATABASE_URL) {\n  client = new Client({\n    connectionString: process.env.DATABASE_URL,\n  });\n  client.connect().catch(console.error);\n  db = drizzle(client, { schema });\n  console.log(\"Connected to PostgreSQL database\");\n} else {\n  console.log(\"DATABASE_URL not set - using MemStorage for data persistence\");\n}\n\nexport { client, db };","size_bytes":633},"server/googleAuth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.GOOGLE_CLIENT_ID || !process.env.GOOGLE_CLIENT_SECRET) {\n  console.warn(\"GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET not set. Google Auth will not work.\");\n}\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false,\n      sameSite: \"lax\",\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    passport.use(\n      new GoogleStrategy(\n        {\n          clientID: process.env.GOOGLE_CLIENT_ID!,\n          clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n          callbackURL: \"/api/auth/google/callback\",\n        },\n        async (accessToken, refreshToken, profile, done) => {\n          try {\n            const user = await storage.upsertUser({\n              id: profile.id,\n              email: profile.emails?.[0]?.value || null,\n              firstName: profile.name?.givenName || null,\n              lastName: profile.name?.familyName || null,\n              profileImageUrl: profile.photos?.[0]?.value || null,\n            });\n            return done(null, user);\n          } catch (error) {\n            return done(error, false);\n          }\n        }\n      )\n    );\n  }\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error, null);\n    }\n  });\n\n  // Auth routes - only add if Google credentials are available\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    app.get(\"/api/auth/google\", \n      passport.authenticate(\"google\", { scope: [\"profile\", \"email\"] })\n    );\n\n    app.get(\"/api/auth/google/callback\",\n      passport.authenticate(\"google\", { failureRedirect: \"/\" }),\n      (req, res) => {\n        res.redirect(\"/\");\n      }\n    );\n  }\n\n  // Add a general login route that redirects to Google auth\n  app.get(\"/api/login\", (req, res) => {\n    res.redirect(\"/api/auth/google\");\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\"/\");\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n};","size_bytes":3161},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./googleAuth\";\nimport { insertMessageSchema, updateUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      res.json(req.user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User routes\n  app.put('/api/users/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const updates = updateUserSchema.parse(req.body);\n      \n      const updatedUser = await storage.updateUser(userId, updates);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  app.post('/api/users/online-status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { isOnline } = z.object({ isOnline: z.boolean() }).parse(req.body);\n      \n      await storage.updateUserOnlineStatus(userId, isOnline);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating online status:\", error);\n      res.status(500).json({ message: \"Failed to update online status\" });\n    }\n  });\n\n  app.get('/api/users/search', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { q } = z.object({ q: z.string().min(1) }).parse(req.query);\n      \n      const users = await storage.searchUsers(q, userId);\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error searching users:\", error);\n      res.status(500).json({ message: \"Failed to search users\" });\n    }\n  });\n\n  // Chat routes\n  app.get('/api/chats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const chats = await storage.getUserChats(userId);\n      res.json(chats);\n    } catch (error) {\n      console.error(\"Error fetching chats:\", error);\n      res.status(500).json({ message: \"Failed to fetch chats\" });\n    }\n  });\n\n  app.post('/api/chats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { otherUserId } = z.object({ otherUserId: z.string() }).parse(req.body);\n      \n      const chat = await storage.getOrCreateChat(userId, otherUserId);\n      res.json(chat);\n    } catch (error) {\n      console.error(\"Error creating chat:\", error);\n      res.status(500).json({ message: \"Failed to create chat\" });\n    }\n  });\n\n  app.get('/api/chats/:chatId/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { chatId } = req.params;\n      const { limit, offset } = z.object({\n        limit: z.string().optional().transform(val => val ? parseInt(val) : 50),\n        offset: z.string().optional().transform(val => val ? parseInt(val) : 0),\n      }).parse(req.query);\n      \n      const messages = await storage.getChatMessages(chatId, limit, offset);\n      \n      // Mark messages as seen\n      await storage.markMessagesAsSeen(chatId, userId);\n      \n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post('/api/chats/:chatId/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { chatId } = req.params;\n      const messageData = insertMessageSchema.parse(req.body);\n      \n      // Derive toUserId from chatId for security\n      const chat = await storage.getChatById(chatId);\n      if (!chat) {\n        return res.status(404).json({ message: \"Chat not found\" });\n      }\n      \n      // Ensure user is part of this chat\n      if (chat.user1Id !== userId && chat.user2Id !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const toUserId = chat.user1Id === userId ? chat.user2Id : chat.user1Id;\n      \n      // Validate file messages\n      if (messageData.messageType === \"file\") {\n        // Check file size (max 10MB)\n        if (messageData.fileSize && messageData.fileSize > 10 * 1024 * 1024) {\n          return res.status(400).json({ message: \"File size too large. Maximum size is 10MB.\" });\n        }\n        \n        // Check for required file metadata\n        if (!messageData.fileName || !messageData.mimeType) {\n          return res.status(400).json({ message: \"File metadata is required for file messages\" });\n        }\n        \n        // Validate MIME types (allow common file types)\n        const allowedTypes = [\n          'image/', 'video/', 'audio/', 'text/', 'application/pdf',\n          'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n          'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n          'application/zip', 'application/x-zip-compressed'\n        ];\n        \n        if (!allowedTypes.some(type => messageData.mimeType!.startsWith(type))) {\n          return res.status(400).json({ message: \"File type not allowed\" });\n        }\n      }\n      \n      const message = await storage.createMessage({\n        ...messageData,\n        fromUserId: userId,\n        toUserId,\n      });\n      \n      res.json(message);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Typing indicators\n  app.post('/api/chats/:chatId/typing', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { chatId } = req.params;\n      const { isTyping } = z.object({ isTyping: z.boolean() }).parse(req.body);\n      \n      await storage.setTypingIndicator(userId, chatId, isTyping);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error setting typing indicator:\", error);\n      res.status(500).json({ message: \"Failed to set typing indicator\" });\n    }\n  });\n\n  app.get('/api/chats/:chatId/typing', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { chatId } = req.params;\n      \n      const indicators = await storage.getTypingIndicators(chatId, userId);\n      res.json(indicators);\n    } catch (error) {\n      console.error(\"Error fetching typing indicators:\", error);\n      res.status(500).json({ message: \"Failed to fetch typing indicators\" });\n    }\n  });\n\n  // Cleanup routes (called periodically)\n  app.post('/api/cleanup/whisper-messages', async (req, res) => {\n    try {\n      await storage.deleteExpiredWhisperMessages();\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error cleaning up whisper messages:\", error);\n      res.status(500).json({ message: \"Failed to cleanup whisper messages\" });\n    }\n  });\n\n  app.post('/api/cleanup/typing-indicators', async (req, res) => {\n    try {\n      await storage.cleanupOldTypingIndicators();\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error cleaning up typing indicators:\", error);\n      res.status(500).json({ message: \"Failed to cleanup typing indicators\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  \n  // WebSocket server for WebRTC signaling (use a specific path to avoid conflict with Vite)\n  const wss = new WebSocketServer({ \n    server: httpServer,\n    path: '/ws-signaling'\n  });\n  \n  // Store active connections and calls\n  const connections = new Map<string, any>(); // userId -> WebSocket\n  const activeCalls = new Map<string, {\n    callId: string;\n    callerId: string;\n    receiverId: string;\n    type: 'voice' | 'video';\n    status: 'ringing' | 'active' | 'ended';\n  }>();\n  \n  wss.on('connection', (ws, req) => {\n    let userId: string | null = null;\n    \n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        switch (message.type) {\n          case 'register':\n            userId = message.userId;\n            connections.set(userId, ws);\n            console.log(`User ${userId} connected to WebSocket`);\n            break;\n            \n          case 'call-offer':\n            const { receiverId, offer, callType } = message;\n            const callId = Math.random().toString(36).substring(7);\n            \n            // Store call info\n            activeCalls.set(callId, {\n              callId,\n              callerId: userId!,\n              receiverId,\n              type: callType,\n              status: 'ringing'\n            });\n            \n            // Send callId back to caller\n            ws.send(JSON.stringify({\n              type: 'call-initiated',\n              callId\n            }));\n            \n            // Send call offer to receiver\n            const receiverWs = connections.get(receiverId);\n            if (receiverWs && receiverWs.readyState === WebSocket.OPEN) {\n              receiverWs.send(JSON.stringify({\n                type: 'incoming-call',\n                callId,\n                callerId: userId,\n                callerName: message.callerName,\n                callType,\n                offer\n              }));\n            } else {\n              // Receiver not online\n              ws.send(JSON.stringify({\n                type: 'call-failed',\n                reason: 'User not available'\n              }));\n            }\n            break;\n            \n          case 'call-answer':\n            const answerCallId = message.callId;\n            const call = activeCalls.get(answerCallId);\n            if (call) {\n              call.status = 'active';\n              \n              // Send answer to caller\n              const callerWs = connections.get(call.callerId);\n              if (callerWs && callerWs.readyState === WebSocket.OPEN) {\n                callerWs.send(JSON.stringify({\n                  type: 'call-answered',\n                  callId: answerCallId,\n                  answer: message.answer\n                }));\n              }\n            }\n            break;\n            \n          case 'call-reject':\n          case 'call-end':\n            const endCallId = message.callId;\n            const endCall = activeCalls.get(endCallId);\n            if (endCall) {\n              endCall.status = 'ended';\n              \n              // Notify the other participant\n              const otherUserId = endCall.callerId === userId ? endCall.receiverId : endCall.callerId;\n              const otherWs = connections.get(otherUserId);\n              if (otherWs && otherWs.readyState === WebSocket.OPEN) {\n                otherWs.send(JSON.stringify({\n                  type: message.type === 'call-reject' ? 'call-rejected' : 'call-ended',\n                  callId: endCallId\n                }));\n              }\n              \n              activeCalls.delete(endCallId);\n            }\n            break;\n            \n          case 'ice-candidate':\n            const candidateCallId = message.callId;\n            const candidateCall = activeCalls.get(candidateCallId);\n            if (candidateCall) {\n              // Forward ICE candidate to the other participant\n              const otherUserId = candidateCall.callerId === userId ? candidateCall.receiverId : candidateCall.callerId;\n              const otherWs = connections.get(otherUserId);\n              if (otherWs && otherWs.readyState === WebSocket.OPEN) {\n                otherWs.send(JSON.stringify({\n                  type: 'ice-candidate',\n                  callId: candidateCallId,\n                  candidate: message.candidate\n                }));\n              }\n            }\n            break;\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n    \n    ws.on('close', () => {\n      if (userId) {\n        connections.delete(userId);\n        console.log(`User ${userId} disconnected from WebSocket`);\n        \n        // End any active calls for this user\n        for (const [callId, call] of activeCalls.entries()) {\n          if (call.callerId === userId || call.receiverId === userId) {\n            const otherUserId = call.callerId === userId ? call.receiverId : call.callerId;\n            const otherWs = connections.get(otherUserId);\n            if (otherWs && otherWs.readyState === WebSocket.OPEN) {\n              otherWs.send(JSON.stringify({\n                type: 'call-ended',\n                callId,\n                reason: 'User disconnected'\n              }));\n            }\n            activeCalls.delete(callId);\n          }\n        }\n      }\n    });\n  });\n  \n  return httpServer;\n}\n","size_bytes":13029},"server/storage.ts":{"content":"import {\n  users,\n  messages,\n  chats,\n  typingIndicators,\n  type User,\n  type UpsertUser,\n  type InsertMessage,\n  type Message,\n  type Chat,\n  type ChatWithDetails,\n  type MessageWithUser,\n  type UpdateUser,\n  type TypingIndicator,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, or, desc, sql, count, isNull } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUser(id: string, updates: UpdateUser): Promise<User>;\n  updateUserOnlineStatus(id: string, isOnline: boolean): Promise<void>;\n  \n  // Chat operations\n  getChatById(chatId: string): Promise<Chat | undefined>;\n  getOrCreateChat(user1Id: string, user2Id: string): Promise<Chat>;\n  getUserChats(userId: string): Promise<ChatWithDetails[]>;\n  \n  // Message operations\n  createMessage(message: InsertMessage & { fromUserId: string }): Promise<Message>;\n  getChatMessages(chatId: string, limit?: number, offset?: number): Promise<MessageWithUser[]>;\n  markMessagesAsSeen(chatId: string, userId: string): Promise<void>;\n  deleteExpiredWhisperMessages(): Promise<void>;\n  \n  // Typing indicators\n  setTypingIndicator(userId: string, chatId: string, isTyping: boolean): Promise<void>;\n  getTypingIndicators(chatId: string, excludeUserId: string): Promise<TypingIndicator[]>;\n  cleanupOldTypingIndicators(): Promise<void>;\n  \n  // Search\n  searchUsers(query: string, excludeUserId: string): Promise<User[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: UpdateUser): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserOnlineStatus(id: string, isOnline: boolean): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        isOnline, \n        lastSeen: new Date(),\n        updatedAt: new Date() \n      })\n      .where(eq(users.id, id));\n  }\n\n  // Chat operations\n  async getChatById(chatId: string): Promise<Chat | undefined> {\n    const [chat] = await db.select().from(chats).where(eq(chats.id, chatId));\n    return chat;\n  }\n\n  async getOrCreateChat(user1Id: string, user2Id: string): Promise<Chat> {\n    // Try to find existing chat\n    const [existingChat] = await db\n      .select()\n      .from(chats)\n      .where(\n        or(\n          and(eq(chats.user1Id, user1Id), eq(chats.user2Id, user2Id)),\n          and(eq(chats.user1Id, user2Id), eq(chats.user2Id, user1Id))\n        )\n      );\n\n    if (existingChat) {\n      return existingChat;\n    }\n\n    // Create new chat\n    const [newChat] = await db\n      .insert(chats)\n      .values({\n        user1Id,\n        user2Id,\n      })\n      .returning();\n\n    return newChat;\n  }\n\n  async getUserChats(userId: string): Promise<ChatWithDetails[]> {\n    const userChats = await db\n      .select({\n        chat: chats,\n        user1: users,\n        user2: users,\n        lastMessage: messages,\n        unreadCount: sql<number>`\n          CAST(COUNT(CASE WHEN ${messages.toUserId} = ${userId} AND ${messages.isSeen} = false THEN 1 END) AS INTEGER)\n        `,\n      })\n      .from(chats)\n      .leftJoin(users, eq(users.id, chats.user1Id))\n      .leftJoin(messages, eq(messages.id, chats.lastMessageId))\n      .where(or(eq(chats.user1Id, userId), eq(chats.user2Id, userId)))\n      .groupBy(chats.id, users.id, messages.id)\n      .orderBy(desc(chats.lastMessageAt));\n\n    return userChats.map(({ chat, user1, user2, lastMessage, unreadCount }) => ({\n      ...chat,\n      otherUser: chat.user1Id === userId ? user2! : user1!,\n      lastMessage: lastMessage || undefined,\n      unreadCount: unreadCount || 0,\n    }));\n  }\n\n  // Message operations\n  async createMessage(messageData: InsertMessage & { fromUserId: string }): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values({\n        ...messageData,\n        whisperExpiresAt: messageData.isWhisper \n          ? new Date(Date.now() + 10 * 1000) // 10 seconds\n          : null,\n      })\n      .returning();\n\n    // Update chat's last message\n    const chat = await this.getOrCreateChat(messageData.fromUserId, messageData.toUserId);\n    await db\n      .update(chats)\n      .set({\n        lastMessageId: message.id,\n        lastMessageAt: message.createdAt,\n      })\n      .where(eq(chats.id, chat.id));\n\n    return message;\n  }\n\n  async getChatMessages(chatId: string, limit = 50, offset = 0): Promise<MessageWithUser[]> {\n    const chat = await db.select().from(chats).where(eq(chats.id, chatId)).limit(1);\n    if (!chat.length) return [];\n\n    const { user1Id, user2Id } = chat[0];\n\n    const chatMessages = await db\n      .select({\n        message: messages,\n        fromUser: users,\n      })\n      .from(messages)\n      .innerJoin(users, eq(users.id, messages.fromUserId))\n      .where(\n        and(\n          or(\n            and(eq(messages.fromUserId, user1Id), eq(messages.toUserId, user2Id)),\n            and(eq(messages.fromUserId, user2Id), eq(messages.toUserId, user1Id))\n          ),\n          or(\n            eq(messages.isWhisper, false),\n            and(\n              eq(messages.isWhisper, true),\n              sql`${messages.whisperExpiresAt} > NOW()`\n            )\n          )\n        )\n      )\n      .orderBy(desc(messages.createdAt))\n      .limit(limit)\n      .offset(offset);\n\n    return chatMessages.map(({ message, fromUser }) => ({\n      ...message,\n      fromUser,\n    })).reverse();\n  }\n\n  async markMessagesAsSeen(chatId: string, userId: string): Promise<void> {\n    const chat = await db.select().from(chats).where(eq(chats.id, chatId)).limit(1);\n    if (!chat.length) return;\n\n    const { user1Id, user2Id } = chat[0];\n    \n    await db\n      .update(messages)\n      .set({ isSeen: true, seenAt: new Date() })\n      .where(\n        and(\n          eq(messages.toUserId, userId),\n          or(\n            and(eq(messages.fromUserId, user1Id), eq(messages.toUserId, user2Id)),\n            and(eq(messages.fromUserId, user2Id), eq(messages.toUserId, user1Id))\n          ),\n          eq(messages.isSeen, false)\n        )\n      );\n  }\n\n  async deleteExpiredWhisperMessages(): Promise<void> {\n    await db\n      .delete(messages)\n      .where(\n        and(\n          eq(messages.isWhisper, true),\n          sql`${messages.whisperExpiresAt} <= NOW()`\n        )\n      );\n  }\n\n  // Typing indicators\n  async setTypingIndicator(userId: string, chatId: string, isTyping: boolean): Promise<void> {\n    if (isTyping) {\n      await db\n        .insert(typingIndicators)\n        .values({ userId, chatId, isTyping })\n        .onConflictDoUpdate({\n          target: [typingIndicators.userId, typingIndicators.chatId],\n          set: { isTyping: true, createdAt: new Date() },\n        });\n    } else {\n      await db\n        .delete(typingIndicators)\n        .where(\n          and(\n            eq(typingIndicators.userId, userId),\n            eq(typingIndicators.chatId, chatId)\n          )\n        );\n    }\n  }\n\n  async getTypingIndicators(chatId: string, excludeUserId: string): Promise<TypingIndicator[]> {\n    return await db\n      .select()\n      .from(typingIndicators)\n      .where(\n        and(\n          eq(typingIndicators.chatId, chatId),\n          sql`${typingIndicators.userId} != ${excludeUserId}`,\n          sql`${typingIndicators.createdAt} > NOW() - INTERVAL '5 seconds'`\n        )\n      );\n  }\n\n  async cleanupOldTypingIndicators(): Promise<void> {\n    await db\n      .delete(typingIndicators)\n      .where(sql`${typingIndicators.createdAt} <= NOW() - INTERVAL '5 seconds'`);\n  }\n\n  // Search\n  async searchUsers(query: string, excludeUserId: string): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(\n        and(\n          sql`${users.id} != ${excludeUserId}`,\n          or(\n            sql`${users.username} ILIKE ${'%' + query + '%'}`,\n            sql`${users.firstName} ILIKE ${'%' + query + '%'}`,\n            sql`${users.lastName} ILIKE ${'%' + query + '%'}`,\n            sql`${users.email} ILIKE ${'%' + query + '%'}`\n          )\n        )\n      )\n      .limit(20);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8726},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  boolean,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: text(\"profile_image_url\"),\n  username: varchar(\"username\").unique(),\n  bio: text(\"bio\"),\n  colorTag: varchar(\"color_tag\").default(\"#2563eb\"),\n  isOnline: boolean(\"is_online\").default(false),\n  lastSeen: timestamp(\"last_seen\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Messages table\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fromUserId: varchar(\"from_user_id\").notNull(),\n  toUserId: varchar(\"to_user_id\").notNull(),\n  content: text(\"content\").notNull(),\n  messageType: varchar(\"message_type\").default(\"text\"), // text, voice, file\n  fileName: varchar(\"file_name\"), // For file messages\n  fileSize: integer(\"file_size\"), // File size in bytes\n  mimeType: varchar(\"mime_type\"), // MIME type for files\n  isWhisper: boolean(\"is_whisper\").default(false),\n  whisperExpiresAt: timestamp(\"whisper_expires_at\"),\n  isSeen: boolean(\"is_seen\").default(false),\n  seenAt: timestamp(\"seen_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Chats table (for chat metadata)\nexport const chats = pgTable(\"chats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  user1Id: varchar(\"user1_id\").notNull(),\n  user2Id: varchar(\"user2_id\").notNull(),\n  lastMessageId: varchar(\"last_message_id\"),\n  lastMessageAt: timestamp(\"last_message_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Typing indicators table\nexport const typingIndicators = pgTable(\"typing_indicators\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  chatId: varchar(\"chat_id\").notNull(),\n  isTyping: boolean(\"is_typing\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  sentMessages: many(messages, { relationName: \"sentMessages\" }),\n  receivedMessages: many(messages, { relationName: \"receivedMessages\" }),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  fromUser: one(users, {\n    fields: [messages.fromUserId],\n    references: [users.id],\n    relationName: \"sentMessages\",\n  }),\n  toUser: one(users, {\n    fields: [messages.toUserId],\n    references: [users.id],\n    relationName: \"receivedMessages\",\n  }),\n}));\n\nexport const chatsRelations = relations(chats, ({ one }) => ({\n  user1: one(users, {\n    fields: [chats.user1Id],\n    references: [users.id],\n  }),\n  user2: one(users, {\n    fields: [chats.user2Id],\n    references: [users.id],\n  }),\n  lastMessage: one(messages, {\n    fields: [chats.lastMessageId],\n    references: [messages.id],\n  }),\n}));\n\n// Schemas for validation\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  username: true,\n  bio: true,\n  colorTag: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).pick({\n  toUserId: true,\n  content: true,\n  messageType: true,\n  fileName: true,\n  fileSize: true,\n  mimeType: true,\n  isWhisper: true,\n});\n\nexport const insertChatSchema = createInsertSchema(chats).pick({\n  user1Id: true,\n  user2Id: true,\n});\n\nexport const updateUserSchema = insertUserSchema.partial();\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type InsertChat = z.infer<typeof insertChatSchema>;\nexport type UpdateUser = z.infer<typeof updateUserSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type Chat = typeof chats.$inferSelect;\nexport type TypingIndicator = typeof typingIndicators.$inferSelect;\n\n// Extended types for API responses\nexport type ChatWithDetails = Chat & {\n  otherUser: User;\n  lastMessage?: Message;\n  unreadCount: number;\n};\n\nexport type MessageWithUser = Message & {\n  fromUser: User;\n};\n","size_bytes":4821},"todo-app-rn/App.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  TouchableOpacity,\n  FlatList,\n  Alert,\n  SafeAreaView,\n  StatusBar,\n  Modal,\n} from 'react-native';\n\n// Define Todo type\nexport interface Todo {\n  id: string;\n  text: string;\n  completed: boolean;\n  createdAt: Date;\n}\n\n// Filter types\ntype FilterType = 'all' | 'active' | 'completed';\n\nexport default function App() {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [inputText, setInputText] = useState('');\n  const [filter, setFilter] = useState<FilterType>('all');\n  const [editingTodo, setEditingTodo] = useState<Todo | null>(null);\n  const [editText, setEditText] = useState('');\n\n  // Add a new todo\n  const addTodo = () => {\n    if (inputText.trim() === '') {\n      Alert.alert('Error', 'Please enter a todo item');\n      return;\n    }\n\n    const newTodo: Todo = {\n      id: Date.now().toString(),\n      text: inputText.trim(),\n      completed: false,\n      createdAt: new Date(),\n    };\n\n    setTodos([newTodo, ...todos]);\n    setInputText('');\n  };\n\n  // Toggle todo completion\n  const toggleTodo = (id: string) => {\n    setTodos(todos.map(todo => \n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  // Delete todo\n  const deleteTodo = (id: string) => {\n    Alert.alert(\n      'Delete Todo',\n      'Are you sure you want to delete this todo?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { \n          text: 'Delete', \n          style: 'destructive',\n          onPress: () => setTodos(todos.filter(todo => todo.id !== id))\n        }\n      ]\n    );\n  };\n\n  // Start editing a todo\n  const startEdit = (todo: Todo) => {\n    setEditingTodo(todo);\n    setEditText(todo.text);\n  };\n\n  // Save edited todo\n  const saveEdit = () => {\n    if (editText.trim() === '') {\n      Alert.alert('Error', 'Todo text cannot be empty');\n      return;\n    }\n\n    setTodos(todos.map(todo => \n      todo.id === editingTodo?.id \n        ? { ...todo, text: editText.trim() }\n        : todo\n    ));\n    \n    setEditingTodo(null);\n    setEditText('');\n  };\n\n  // Cancel editing\n  const cancelEdit = () => {\n    setEditingTodo(null);\n    setEditText('');\n  };\n\n  // Filter todos based on current filter\n  const filteredTodos = todos.filter(todo => {\n    switch (filter) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n\n  // Get counts for each filter\n  const activeTodosCount = todos.filter(todo => !todo.completed).length;\n  const completedTodosCount = todos.filter(todo => todo.completed).length;\n\n  // Clear completed todos\n  const clearCompleted = () => {\n    if (completedTodosCount === 0) return;\n    \n    Alert.alert(\n      'Clear Completed',\n      `Remove ${completedTodosCount} completed todo${completedTodosCount > 1 ? 's' : ''}?`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { \n          text: 'Clear', \n          style: 'destructive',\n          onPress: () => setTodos(todos.filter(todo => !todo.completed))\n        }\n      ]\n    );\n  };\n\n  // Render individual todo item\n  const renderTodoItem = ({ item }: { item: Todo }) => (\n    <View style={styles.todoItem}>\n      <TouchableOpacity\n        style={[styles.checkBox, item.completed && styles.checkBoxCompleted]}\n        onPress={() => toggleTodo(item.id)}\n      >\n        {item.completed && <Text style={styles.checkMark}>‚úì</Text>}\n      </TouchableOpacity>\n      \n      <Text style={[\n        styles.todoText,\n        item.completed && styles.todoTextCompleted\n      ]}>\n        {item.text}\n      </Text>\n      \n      <View style={styles.todoActions}>\n        <TouchableOpacity\n          style={styles.editButton}\n          onPress={() => startEdit(item)}\n        >\n          <Text style={styles.editButtonText}>Edit</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity\n          style={styles.deleteButton}\n          onPress={() => deleteTodo(item.id)}\n        >\n          <Text style={styles.deleteButtonText}>Delete</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"#f8f9fa\" />\n      \n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>My Todo App</Text>\n        <Text style={styles.subtitle}>\n          {activeTodosCount} active, {completedTodosCount} completed\n        </Text>\n      </View>\n\n      {/* Add Todo Input */}\n      <View style={styles.inputContainer}>\n        <TextInput\n          style={styles.input}\n          placeholder=\"What needs to be done?\"\n          value={inputText}\n          onChangeText={setInputText}\n          onSubmitEditing={addTodo}\n          returnKeyType=\"done\"\n        />\n        <TouchableOpacity style={styles.addButton} onPress={addTodo}>\n          <Text style={styles.addButtonText}>Add</Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Filter Buttons */}\n      <View style={styles.filterContainer}>\n        {(['all', 'active', 'completed'] as FilterType[]).map((filterType) => (\n          <TouchableOpacity\n            key={filterType}\n            style={[\n              styles.filterButton,\n              filter === filterType && styles.filterButtonActive\n            ]}\n            onPress={() => setFilter(filterType)}\n          >\n            <Text style={[\n              styles.filterButtonText,\n              filter === filterType && styles.filterButtonTextActive\n            ]}>\n              {filterType.charAt(0).toUpperCase() + filterType.slice(1)}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      {/* Todo List */}\n      <FlatList\n        data={filteredTodos}\n        renderItem={renderTodoItem}\n        keyExtractor={(item) => item.id}\n        style={styles.todoList}\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={\n          <View style={styles.emptyContainer}>\n            <Text style={styles.emptyText}>\n              {filter === 'all' \n                ? 'No todos yet. Add one above!' \n                : filter === 'active'\n                ? 'No active todos!'\n                : 'No completed todos!'\n              }\n            </Text>\n          </View>\n        }\n      />\n\n      {/* Clear Completed Button */}\n      {completedTodosCount > 0 && (\n        <TouchableOpacity style={styles.clearButton} onPress={clearCompleted}>\n          <Text style={styles.clearButtonText}>\n            Clear {completedTodosCount} Completed\n          </Text>\n        </TouchableOpacity>\n      )}\n\n      {/* Edit Modal */}\n      <Modal\n        visible={editingTodo !== null}\n        transparent={true}\n        animationType=\"slide\"\n      >\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <Text style={styles.modalTitle}>Edit Todo</Text>\n            <TextInput\n              style={styles.modalInput}\n              value={editText}\n              onChangeText={setEditText}\n              placeholder=\"Edit todo text...\"\n              multiline={true}\n              autoFocus={true}\n            />\n            <View style={styles.modalButtons}>\n              <TouchableOpacity style={styles.modalCancelButton} onPress={cancelEdit}>\n                <Text style={styles.modalCancelText}>Cancel</Text>\n              </TouchableOpacity>\n              <TouchableOpacity style={styles.modalSaveButton} onPress={saveEdit}>\n                <Text style={styles.modalSaveText}>Save</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8f9fa',\n  },\n  header: {\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e9ecef',\n    backgroundColor: '#fff',\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#212529',\n    textAlign: 'center',\n  },\n  subtitle: {\n    fontSize: 14,\n    color: '#6c757d',\n    textAlign: 'center',\n    marginTop: 5,\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n    backgroundColor: '#fff',\n    borderBottomWidth: 1,\n    borderBottomColor: '#e9ecef',\n  },\n  input: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: '#dee2e6',\n    borderRadius: 8,\n    paddingHorizontal: 15,\n    paddingVertical: 12,\n    fontSize: 16,\n    backgroundColor: '#fff',\n  },\n  addButton: {\n    backgroundColor: '#007bff',\n    paddingHorizontal: 20,\n    paddingVertical: 12,\n    borderRadius: 8,\n    marginLeft: 10,\n    justifyContent: 'center',\n  },\n  addButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  filterContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n    backgroundColor: '#fff',\n    borderBottomWidth: 1,\n    borderBottomColor: '#e9ecef',\n  },\n  filterButton: {\n    flex: 1,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    marginHorizontal: 4,\n    backgroundColor: '#f8f9fa',\n  },\n  filterButtonActive: {\n    backgroundColor: '#007bff',\n  },\n  filterButtonText: {\n    textAlign: 'center',\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#495057',\n  },\n  filterButtonTextActive: {\n    color: '#fff',\n  },\n  todoList: {\n    flex: 1,\n    paddingHorizontal: 20,\n  },\n  todoItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    marginVertical: 5,\n    backgroundColor: '#fff',\n    borderRadius: 8,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  checkBox: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    borderWidth: 2,\n    borderColor: '#dee2e6',\n    marginRight: 12,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  checkBoxCompleted: {\n    backgroundColor: '#28a745',\n    borderColor: '#28a745',\n  },\n  checkMark: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n  todoText: {\n    flex: 1,\n    fontSize: 16,\n    color: '#212529',\n  },\n  todoTextCompleted: {\n    textDecorationLine: 'line-through',\n    color: '#6c757d',\n  },\n  todoActions: {\n    flexDirection: 'row',\n  },\n  editButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: '#ffc107',\n    marginRight: 8,\n  },\n  editButtonText: {\n    color: '#212529',\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  deleteButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: '#dc3545',\n  },\n  deleteButtonText: {\n    color: '#fff',\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: 50,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: '#6c757d',\n    textAlign: 'center',\n  },\n  clearButton: {\n    marginHorizontal: 20,\n    marginVertical: 15,\n    backgroundColor: '#dc3545',\n    paddingVertical: 12,\n    borderRadius: 8,\n  },\n  clearButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    padding: 20,\n    width: '90%',\n    maxWidth: 400,\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#212529',\n    marginBottom: 15,\n    textAlign: 'center',\n  },\n  modalInput: {\n    borderWidth: 1,\n    borderColor: '#dee2e6',\n    borderRadius: 8,\n    paddingHorizontal: 15,\n    paddingVertical: 12,\n    fontSize: 16,\n    minHeight: 80,\n    textAlignVertical: 'top',\n  },\n  modalButtons: {\n    flexDirection: 'row',\n    marginTop: 20,\n    justifyContent: 'space-between',\n  },\n  modalCancelButton: {\n    flex: 1,\n    paddingVertical: 12,\n    borderRadius: 8,\n    backgroundColor: '#6c757d',\n    marginRight: 10,\n  },\n  modalCancelText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  modalSaveButton: {\n    flex: 1,\n    paddingVertical: 12,\n    borderRadius: 8,\n    backgroundColor: '#007bff',\n    marginLeft: 10,\n  },\n  modalSaveText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n});\n","size_bytes":12502},"todo-app-rn/index.ts":{"content":"import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","size_bytes":307},"todo-mobile-web/README.md":{"content":"# React + TypeScript + Vite\n\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\n\nCurrently, two official plugins are available:\n\n- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh\n- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh\n\n## Expanding the ESLint configuration\n\nIf you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:\n\n```js\nexport default tseslint.config([\n  globalIgnores(['dist']),\n  {\n    files: ['**/*.{ts,tsx}'],\n    extends: [\n      // Other configs...\n\n      // Remove tseslint.configs.recommended and replace with this\n      ...tseslint.configs.recommendedTypeChecked,\n      // Alternatively, use this for stricter rules\n      ...tseslint.configs.strictTypeChecked,\n      // Optionally, add this for stylistic rules\n      ...tseslint.configs.stylisticTypeChecked,\n\n      // Other configs...\n    ],\n    languageOptions: {\n      parserOptions: {\n        project: ['./tsconfig.node.json', './tsconfig.app.json'],\n        tsconfigRootDir: import.meta.dirname,\n      },\n      // other options...\n    },\n  },\n])\n```\n\nYou can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:\n\n```js\n// eslint.config.js\nimport reactX from 'eslint-plugin-react-x'\nimport reactDom from 'eslint-plugin-react-dom'\n\nexport default tseslint.config([\n  globalIgnores(['dist']),\n  {\n    files: ['**/*.{ts,tsx}'],\n    extends: [\n      // Other configs...\n      // Enable lint rules for React\n      reactX.configs['recommended-typescript'],\n      // Enable lint rules for React DOM\n      reactDom.configs.recommended,\n    ],\n    languageOptions: {\n      parserOptions: {\n        project: ['./tsconfig.node.json', './tsconfig.app.json'],\n        tsconfigRootDir: import.meta.dirname,\n      },\n      // other options...\n    },\n  },\n])\n```\n","size_bytes":2269},"todo-mobile-web/eslint.config.js":{"content":"import js from '@eslint/js'\nimport globals from 'globals'\nimport reactHooks from 'eslint-plugin-react-hooks'\nimport reactRefresh from 'eslint-plugin-react-refresh'\nimport tseslint from 'typescript-eslint'\nimport { globalIgnores } from 'eslint/config'\n\nexport default tseslint.config([\n  globalIgnores(['dist']),\n  {\n    files: ['**/*.{ts,tsx}'],\n    extends: [\n      js.configs.recommended,\n      tseslint.configs.recommended,\n      reactHooks.configs['recommended-latest'],\n      reactRefresh.configs.vite,\n    ],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n  },\n])\n","size_bytes":610},"todo-mobile-web/vite.config.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n})\n","size_bytes":161},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport TodoPage from \"@/pages/todo\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/chat/:chatId\" component={Home} />\n          <Route path=\"/profile\" component={Home} />\n          <Route path=\"/todo\" component={TodoPage} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1286},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --chat-blue: hsl(207, 90%, 54%);\n  --chat-gray: hsl(218, 11%, 42%);\n  --chat-green: hsl(157, 68%, 40%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --chat-blue: hsl(207, 90%, 54%);\n  --chat-gray: hsl(218, 11%, 65%);\n  --chat-green: hsl(157, 68%, 45%);\n  --dark-bg: hsl(240, 10%, 3.9%);\n  --dark-surface: hsl(240, 5%, 12%);\n  --dark-border: hsl(240, 5%, 26%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Smooth scrolling for better UX */\n  html {\n    scroll-behavior: smooth;\n  }\n\n  /* Custom scrollbar for webkit browsers */\n  ::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    @apply bg-gray-100 dark:bg-gray-800;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    @apply bg-gray-300 dark:bg-gray-600 rounded-full;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    @apply bg-gray-400 dark:bg-gray-500;\n  }\n\n  /* Message bubble animations */\n  @keyframes message-slide-in {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  .message-bubble {\n    animation: message-slide-in 0.2s ease-out;\n  }\n\n  /* Typing indicator animation */\n  @keyframes typing-bounce {\n    0%, 60%, 100% {\n      transform: translateY(0);\n    }\n    30% {\n      transform: translateY(-10px);\n    }\n  }\n\n  .typing-dot {\n    animation: typing-bounce 1.4s infinite;\n  }\n\n  /* Custom color classes for chat bubbles */\n  .chat-bubble-blue {\n    background-color: hsl(207, 90%, 54%);\n  }\n\n  .chat-bubble-green {\n    background-color: hsl(157, 68%, 40%);\n  }\n\n  .chat-bubble-purple {\n    background-color: hsl(271, 76%, 60%);\n  }\n\n  .chat-bubble-pink {\n    background-color: hsl(333, 71%, 55%);\n  }\n\n  .chat-bubble-orange {\n    background-color: hsl(25, 95%, 53%);\n  }\n\n  .chat-bubble-red {\n    background-color: hsl(0, 84%, 60%);\n  }\n\n  .chat-bubble-indigo {\n    background-color: hsl(239, 62%, 65%);\n  }\n\n  .chat-bubble-teal {\n    background-color: hsl(173, 80%, 40%);\n  }\n}\n\n/* Font optimization */\n@layer base {\n  body {\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n}\n\n/* Mobile-first responsive adjustments */\n@media (max-width: 768px) {\n  .max-w-md {\n    max-width: 100vw;\n  }\n  \n  .shadow-xl {\n    box-shadow: none;\n  }\n}\n\n/* Focus states for better accessibility */\n@layer base {\n  *:focus-visible {\n    outline: 2px solid hsl(var(--ring));\n    outline-offset: 2px;\n  }\n}\n","size_bytes":4073},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"todo-mobile-web/src/App.css":{"content":"/* Mobile-First Todo App Styles */\n.app {\n  min-height: 100vh;\n  max-width: 420px;\n  margin: 0 auto;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  position: relative;\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\n}\n\n/* Header */\n.header {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  padding: 20px;\n  text-align: center;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n  position: sticky;\n  top: 0;\n  z-index: 100;\n}\n\n.title {\n  margin: 0 0 10px 0;\n  font-size: 24px;\n  font-weight: 700;\n  color: #2c3e50;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n}\n\n.title .icon {\n  background: linear-gradient(45deg, #667eea, #764ba2);\n  color: white;\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n}\n\n.stats {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  font-size: 14px;\n}\n\n.stat {\n  padding: 4px 12px;\n  border-radius: 20px;\n  font-weight: 500;\n}\n\n.stat.active {\n  background: #e3f2fd;\n  color: #1976d2;\n}\n\n.stat.completed {\n  background: #e8f5e8;\n  color: #388e3c;\n}\n\n/* Add Todo Section */\n.add-section {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  padding: 20px;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.priority-selector {\n  display: flex;\n  gap: 8px;\n  margin-bottom: 15px;\n  justify-content: center;\n}\n\n.priority-btn {\n  flex: 1;\n  padding: 8px 12px;\n  border: 2px solid transparent;\n  border-radius: 20px;\n  background: rgba(255, 255, 255, 0.8);\n  color: #666;\n  font-size: 12px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-transform: capitalize;\n}\n\n.priority-btn:hover {\n  transform: translateY(-1px);\n}\n\n.priority-btn.active {\n  color: white;\n  transform: scale(1.05);\n}\n\n.input-section {\n  display: flex;\n  gap: 10px;\n}\n\n.todo-input {\n  flex: 1;\n  padding: 15px;\n  border: none;\n  border-radius: 25px;\n  background: rgba(255, 255, 255, 0.9);\n  font-size: 16px;\n  outline: none;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease;\n}\n\n.todo-input:focus {\n  transform: scale(1.02);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n}\n\n.add-btn {\n  width: 50px;\n  height: 50px;\n  border: none;\n  border-radius: 50%;\n  background: linear-gradient(45deg, #667eea, #764ba2);\n  color: white;\n  font-size: 24px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);\n}\n\n.add-btn:hover {\n  transform: scale(1.1) rotate(90deg);\n}\n\n.add-btn:active {\n  transform: scale(0.95);\n}\n\n/* Filter Section */\n.filter-section {\n  background: rgba(255, 255, 255, 0.9);\n  backdrop-filter: blur(10px);\n  padding: 15px 20px;\n  display: flex;\n  gap: 10px;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.filter-btn {\n  flex: 1;\n  padding: 10px;\n  border: none;\n  border-radius: 20px;\n  background: rgba(255, 255, 255, 0.7);\n  color: #666;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.filter-btn.active {\n  background: linear-gradient(45deg, #667eea, #764ba2);\n  color: white;\n  transform: scale(1.05);\n}\n\n.filter-btn:hover:not(.active) {\n  background: rgba(255, 255, 255, 0.9);\n  transform: translateY(-1px);\n}\n\n/* Todos Section */\n.todos-section {\n  flex: 1;\n  padding: 20px;\n  min-height: 400px;\n}\n\n.empty-state {\n  text-align: center;\n  padding: 60px 20px;\n  color: rgba(255, 255, 255, 0.8);\n}\n\n.empty-icon {\n  font-size: 64px;\n  margin-bottom: 20px;\n}\n\n.empty-text {\n  font-size: 18px;\n  line-height: 1.5;\n  margin: 0;\n}\n\n.todo-list {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.todo-item {\n  background: rgba(255, 255, 255, 0.95);\n  border-radius: 15px;\n  padding: 15px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n}\n\n.todo-item:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n}\n\n.todo-item.completed {\n  opacity: 0.7;\n  background: rgba(255, 255, 255, 0.8);\n}\n\n.todo-main {\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n  flex: 1;\n}\n\n.check-btn {\n  width: 24px;\n  height: 24px;\n  border: 2px solid #ddd;\n  border-radius: 50%;\n  background: white;\n  color: white;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  margin-top: 2px;\n}\n\n.check-btn.checked {\n  background: linear-gradient(45deg, #667eea, #764ba2);\n  border-color: #667eea;\n  transform: scale(1.1);\n}\n\n.check-btn:hover {\n  transform: scale(1.1);\n  border-color: #667eea;\n}\n\n.todo-content {\n  flex: 1;\n}\n\n.todo-text {\n  font-size: 16px;\n  color: #2c3e50;\n  line-height: 1.4;\n  margin-bottom: 8px;\n  cursor: pointer;\n  word-break: break-word;\n}\n\n.todo-item.completed .todo-text {\n  text-decoration: line-through;\n  color: #999;\n}\n\n.todo-meta {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  font-size: 12px;\n}\n\n.priority-badge {\n  padding: 2px 8px;\n  border-radius: 10px;\n  font-size: 10px;\n  font-weight: 600;\n  text-transform: uppercase;\n}\n\n.todo-date {\n  color: #999;\n}\n\n.edit-input input {\n  width: 100%;\n  padding: 8px 12px;\n  border: 2px solid #667eea;\n  border-radius: 8px;\n  font-size: 16px;\n  outline: none;\n  background: #f8f9fa;\n}\n\n.todo-actions {\n  display: flex;\n  gap: 8px;\n  flex-shrink: 0;\n}\n\n.edit-btn, .delete-btn, .save-btn, .cancel-btn {\n  width: 32px;\n  height: 32px;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 14px;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.edit-btn {\n  background: #ffc107;\n}\n\n.delete-btn {\n  background: #dc3545;\n}\n\n.save-btn {\n  background: #28a745;\n}\n\n.cancel-btn {\n  background: #6c757d;\n}\n\n.edit-btn:hover, .delete-btn:hover, .save-btn:hover, .cancel-btn:hover {\n  transform: scale(1.1);\n  opacity: 0.9;\n}\n\n/* Footer */\n.footer {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  padding: 20px;\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.clear-btn {\n  width: 100%;\n  padding: 15px;\n  border: none;\n  border-radius: 25px;\n  background: linear-gradient(45deg, #ff6b6b, #ee5a6f);\n  color: white;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);\n}\n\n.clear-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(255, 107, 107, 0.6);\n}\n\n.clear-btn:active {\n  transform: translateY(0);\n}\n\n/* Responsive Design */\n@media (max-width: 480px) {\n  .app {\n    max-width: 100%;\n    min-height: 100vh;\n  }\n  \n  .header {\n    padding: 15px;\n  }\n  \n  .title {\n    font-size: 20px;\n  }\n  \n  .add-section {\n    padding: 15px;\n  }\n  \n  .priority-selector {\n    flex-wrap: wrap;\n  }\n  \n  .priority-btn {\n    min-width: 80px;\n  }\n  \n  .todos-section {\n    padding: 15px;\n  }\n  \n  .todo-item {\n    padding: 12px;\n  }\n  \n  .todo-text {\n    font-size: 15px;\n  }\n}\n\n/* Smooth animations */\n@keyframes slideInUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.todo-item {\n  animation: slideInUp 0.3s ease;\n}\n\n/* Focus styles for accessibility */\n.todo-input:focus,\n.filter-btn:focus,\n.priority-btn:focus,\n.add-btn:focus,\n.clear-btn:focus {\n  outline: 2px solid #667eea;\n  outline-offset: 2px;\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  .app {\n    background: #000;\n  }\n  \n  .todo-item,\n  .header,\n  .add-section,\n  .filter-section,\n  .footer {\n    background: #fff;\n    border: 2px solid #000;\n  }\n}\n","size_bytes":7722},"todo-mobile-web/src/App.tsx":{"content":"import { useState, useEffect } from 'react';\nimport './App.css';\n\ninterface Todo {\n  id: string;\n  text: string;\n  completed: boolean;\n  createdAt: Date;\n  priority: 'low' | 'medium' | 'high';\n}\n\ntype FilterType = 'all' | 'active' | 'completed';\n\nfunction App() {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [inputText, setInputText] = useState('');\n  const [filter, setFilter] = useState<FilterType>('all');\n  const [priority, setPriority] = useState<'low' | 'medium' | 'high'>('medium');\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editText, setEditText] = useState('');\n\n  // Load todos from localStorage on mount\n  useEffect(() => {\n    const savedTodos = localStorage.getItem('mobile-todos');\n    if (savedTodos) {\n      const parsedTodos = JSON.parse(savedTodos).map((todo: any) => ({\n        ...todo,\n        createdAt: new Date(todo.createdAt)\n      }));\n      setTodos(parsedTodos);\n    }\n  }, []);\n\n  // Save todos to localStorage whenever todos change\n  useEffect(() => {\n    localStorage.setItem('mobile-todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const addTodo = () => {\n    if (inputText.trim() === '') return;\n\n    const newTodo: Todo = {\n      id: Date.now().toString(),\n      text: inputText.trim(),\n      completed: false,\n      createdAt: new Date(),\n      priority\n    };\n\n    setTodos([newTodo, ...todos]);\n    setInputText('');\n  };\n\n  const toggleTodo = (id: string) => {\n    setTodos(todos.map(todo =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  const deleteTodo = (id: string) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const startEdit = (id: string, text: string) => {\n    setEditingId(id);\n    setEditText(text);\n  };\n\n  const saveEdit = () => {\n    if (editText.trim() === '') return;\n    \n    setTodos(todos.map(todo =>\n      todo.id === editingId ? { ...todo, text: editText.trim() } : todo\n    ));\n    setEditingId(null);\n    setEditText('');\n  };\n\n  const cancelEdit = () => {\n    setEditingId(null);\n    setEditText('');\n  };\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  const filteredTodos = todos.filter(todo => {\n    switch (filter) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n\n  const activeTodosCount = todos.filter(todo => !todo.completed).length;\n  const completedTodosCount = todos.filter(todo => todo.completed).length;\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return '#ff4757';\n      case 'medium': return '#ffa726';\n      case 'low': return '#66bb6a';\n      default: return '#66bb6a';\n    }\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'üî•';\n      case 'medium': return '‚ö°';\n      case 'low': return 'üå±';\n      default: return 'üå±';\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      {/* Header */}\n      <header className=\"header\">\n        <h1 className=\"title\">\n          <span className=\"icon\">‚úì</span>\n          TodoMobile\n        </h1>\n        <div className=\"stats\">\n          <span className=\"stat active\">{activeTodosCount} active</span>\n          <span className=\"stat completed\">{completedTodosCount} done</span>\n        </div>\n      </header>\n\n      {/* Add Todo Section */}\n      <section className=\"add-section\">\n        <div className=\"priority-selector\">\n          {(['low', 'medium', 'high'] as const).map((p) => (\n            <button\n              key={p}\n              className={`priority-btn ${priority === p ? 'active' : ''}`}\n              onClick={() => setPriority(p)}\n              style={{ \n                backgroundColor: priority === p ? getPriorityColor(p) : undefined,\n                borderColor: getPriorityColor(p)\n              }}\n            >\n              {getPriorityIcon(p)} {p}\n            </button>\n          ))}\n        </div>\n        \n        <div className=\"input-section\">\n          <input\n            type=\"text\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && addTodo()}\n            placeholder=\"What needs to be done?\"\n            className=\"todo-input\"\n          />\n          <button onClick={addTodo} className=\"add-btn\">\n            <span>+</span>\n          </button>\n        </div>\n      </section>\n\n      {/* Filter Tabs */}\n      <section className=\"filter-section\">\n        {(['all', 'active', 'completed'] as FilterType[]).map((f) => (\n          <button\n            key={f}\n            className={`filter-btn ${filter === f ? 'active' : ''}`}\n            onClick={() => setFilter(f)}\n          >\n            {f === 'all' ? `All (${todos.length})` : \n             f === 'active' ? `Active (${activeTodosCount})` : \n             `Done (${completedTodosCount})`}\n          </button>\n        ))}\n      </section>\n\n      {/* Todo List */}\n      <section className=\"todos-section\">\n        {filteredTodos.length === 0 ? (\n          <div className=\"empty-state\">\n            <div className=\"empty-icon\">\n              {filter === 'all' ? 'üìù' : filter === 'active' ? '‚è≥' : 'üéâ'}\n            </div>\n            <p className=\"empty-text\">\n              {filter === 'all' \n                ? 'No todos yet. Add your first task above!'\n                : filter === 'active'\n                ? 'No active tasks. Time to relax!'\n                : 'No completed tasks yet. Keep going!'\n              }\n            </p>\n          </div>\n        ) : (\n          <div className=\"todo-list\">\n            {filteredTodos.map((todo) => (\n              <div\n                key={todo.id}\n                className={`todo-item ${todo.completed ? 'completed' : ''}`}\n              >\n                <div className=\"todo-main\">\n                  <button\n                    className={`check-btn ${todo.completed ? 'checked' : ''}`}\n                    onClick={() => toggleTodo(todo.id)}\n                  >\n                    {todo.completed ? '‚úì' : ''}\n                  </button>\n                  \n                  <div className=\"todo-content\">\n                    {editingId === todo.id ? (\n                      <div className=\"edit-input\">\n                        <input\n                          type=\"text\"\n                          value={editText}\n                          onChange={(e) => setEditText(e.target.value)}\n                          onKeyPress={(e) => {\n                            if (e.key === 'Enter') saveEdit();\n                            if (e.key === 'Escape') cancelEdit();\n                          }}\n                          onBlur={saveEdit}\n                          autoFocus\n                        />\n                      </div>\n                    ) : (\n                      <>\n                        <div \n                          className=\"todo-text\"\n                          onDoubleClick={() => startEdit(todo.id, todo.text)}\n                        >\n                          {todo.text}\n                        </div>\n                        <div className=\"todo-meta\">\n                          <span \n                            className=\"priority-badge\"\n                            style={{ \n                              backgroundColor: getPriorityColor(todo.priority),\n                              color: 'white'\n                            }}\n                          >\n                            {getPriorityIcon(todo.priority)} {todo.priority}\n                          </span>\n                          <span className=\"todo-date\">\n                            {todo.createdAt.toLocaleDateString()}\n                          </span>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"todo-actions\">\n                  {editingId === todo.id ? (\n                    <>\n                      <button className=\"save-btn\" onClick={saveEdit}>‚úì</button>\n                      <button className=\"cancel-btn\" onClick={cancelEdit}>‚úï</button>\n                    </>\n                  ) : (\n                    <>\n                      <button \n                        className=\"edit-btn\"\n                        onClick={() => startEdit(todo.id, todo.text)}\n                      >\n                        ‚úèÔ∏è\n                      </button>\n                      <button \n                        className=\"delete-btn\"\n                        onClick={() => deleteTodo(todo.id)}\n                      >\n                        üóëÔ∏è\n                      </button>\n                    </>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </section>\n\n      {/* Action Footer */}\n      {completedTodosCount > 0 && (\n        <footer className=\"footer\">\n          <button className=\"clear-btn\" onClick={clearCompleted}>\n            Clear {completedTodosCount} completed task{completedTodosCount > 1 ? 's' : ''}\n          </button>\n        </footer>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","size_bytes":9229},"todo-mobile-web/src/index.css":{"content":"/* Global Reset and Mobile-First Base Styles */\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 16px;\n  -webkit-text-size-adjust: 100%;\n  -webkit-tap-highlight-color: transparent;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n  line-height: 1.5;\n  color: #333;\n  background: #f5f7fa;\n  margin: 0;\n  padding: 0;\n  min-height: 100vh;\n  overflow-x: hidden;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#root {\n  min-height: 100vh;\n  width: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n/* Remove default button styles */\nbutton {\n  background: none;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  outline: none;\n}\n\n/* Remove default input styles */\ninput {\n  background: none;\n  border: none;\n  font: inherit;\n  outline: none;\n}\n\n/* Accessibility improvements */\nbutton:focus-visible,\ninput:focus-visible {\n  outline: 2px solid #667eea;\n  outline-offset: 2px;\n}\n\n/* Smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Mobile viewport adjustments */\n@media screen and (max-width: 768px) {\n  html {\n    font-size: 14px;\n  }\n}\n\n/* Prevent zoom on inputs on iOS */\n@media screen and (max-width: 768px) {\n  input[type=\"text\"],\n  input[type=\"email\"],\n  input[type=\"password\"],\n  textarea {\n    font-size: 16px;\n  }\n}\n","size_bytes":1365},"todo-mobile-web/src/main.tsx":{"content":"import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App.tsx'\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n)\n","size_bytes":230},"todo-mobile-web/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"client/src/components/chat-list.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, MessageCircle, Moon, Sun, User, Plus, CheckSquare } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { ChatWithDetails, User as UserType } from \"@shared/schema\";\n\nfunction formatTime(date: Date | string | null | undefined) {\n  if (!date) return \"\";\n  const messageDate = new Date(date);\n  const now = new Date();\n  const diffInHours = (now.getTime() - messageDate.getTime()) / (1000 * 60 * 60);\n\n  if (diffInHours < 24) {\n    return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  } else if (diffInHours < 48) {\n    return \"Yesterday\";\n  } else {\n    return messageDate.toLocaleDateString([], { month: 'short', day: 'numeric' });\n  }\n}\n\nfunction UserInitials({ user }: { user: UserType }) {\n  const name = user.firstName && user.lastName \n    ? `${user.firstName} ${user.lastName}`\n    : user.username || user.email || \"U\";\n  \n  return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n}\n\nfunction NewChatDialog({ isOpen, setIsOpen }: { isOpen?: boolean; setIsOpen?: (open: boolean) => void }) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedUser, setSelectedUser] = useState<UserType | null>(null);\n  const [internalIsOpen, setInternalIsOpen] = useState(false);\n  \n  const dialogOpen = isOpen ?? internalIsOpen;\n  const setDialogOpen = setIsOpen ?? setInternalIsOpen;\n\n  const { data: searchResults } = useQuery<UserType[]>({\n    queryKey: [\"/api/users/search\", { q: searchQuery }],\n    enabled: searchQuery.length > 0,\n  });\n\n  const handleStartChat = async (user: UserType) => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/chats\", {\n        otherUserId: user.id,\n      });\n      const chat = await response.json();\n      setDialogOpen(false);\n      window.location.href = `/chat/${chat.id}`;\n    } catch (error) {\n      console.error(\"Failed to start chat:\", error);\n    }\n  };\n\n  return (\n    <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n      <DialogTrigger asChild>\n        <Button \n          className=\"fixed bottom-6 right-6 w-14 h-14 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition-all duration-200 hover:scale-105\"\n          data-testid=\"button-new-chat\"\n        >\n          <Plus size={24} />\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Start New Chat</DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <Input\n            placeholder=\"Search users...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            data-testid=\"input-search-users\"\n          />\n          <div className=\"space-y-2 max-h-64 overflow-y-auto\" data-testid=\"div-search-results\">\n            {searchResults?.map((user: UserType) => (\n              <div\n                key={user.id}\n                className=\"flex items-center p-3 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg cursor-pointer\"\n                onClick={() => handleStartChat(user)}\n                data-testid={`card-user-${user.id}`}\n              >\n                <Avatar className=\"w-10 h-10\">\n                  <AvatarImage src={user.profileImageUrl || undefined} />\n                  <AvatarFallback className=\"bg-gradient-to-br from-blue-400 to-indigo-500 text-white\">\n                    <UserInitials user={user} />\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"ml-3\">\n                  <p className=\"font-medium text-gray-900 dark:text-white\">\n                    {user.firstName && user.lastName \n                      ? `${user.firstName} ${user.lastName}`\n                      : user.username || user.email\n                    }\n                  </p>\n                  {user.username && (\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">@{user.username}</p>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport function ChatList() {\n  const { user } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  \n  const { data: chats, refetch } = useQuery<ChatWithDetails[]>({\n    queryKey: [\"/api/chats\"],\n    refetchInterval: 3000, // Poll every 3 seconds for new messages\n  });\n\n  // Auto-refetch when component mounts\n  useEffect(() => {\n    refetch();\n  }, [refetch]);\n\n  return (\n    <div className=\"flex flex-col h-screen\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3 flex items-center justify-between\">\n        <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white\">Chats</h1>\n        <div className=\"flex items-center space-x-3\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full\"\n            onClick={() => setIsSearchOpen(true)}\n            data-testid=\"button-search-users\"\n          >\n            <Search className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\n          </Button>\n          <Link href=\"/todo\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full\" data-testid=\"link-todo\">\n              <CheckSquare className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\n            </Button>\n          </Link>\n          <Link href=\"/profile\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full\" data-testid=\"link-profile\">\n              <Avatar className=\"w-6 h-6\">\n                <AvatarImage src={user?.profileImageUrl || undefined} />\n                <AvatarFallback className=\"bg-blue-600 text-white text-xs\">\n                  {user && <UserInitials user={user} />}\n                </AvatarFallback>\n              </Avatar>\n            </Button>\n          </Link>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full\"\n            onClick={toggleTheme}\n            data-testid=\"button-toggle-theme\"\n          >\n            {theme === \"light\" ? (\n              <Moon className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\n            ) : (\n              <Sun className=\"w-5 h-5 text-yellow-400\" />\n            )}\n          </Button>\n        </div>\n      </div>\n\n      {/* Chat List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {chats && chats.length > 0 ? (\n          chats.map((chat: ChatWithDetails) => (\n            <Link key={chat.id} href={`/chat/${chat.id}`}>\n              <div className=\"hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer transition-colors duration-150\">\n                <div className=\"flex items-center p-4 border-b border-gray-100 dark:border-gray-600\">\n                  <div className=\"relative\">\n                    <Avatar className=\"w-12 h-12\">\n                      <AvatarImage src={chat.otherUser.profileImageUrl || undefined} />\n                      <AvatarFallback \n                        className=\"text-white font-medium text-lg\"\n                        style={{ backgroundColor: chat.otherUser.colorTag || \"#2563eb\" }}\n                      >\n                        <UserInitials user={chat.otherUser} />\n                      </AvatarFallback>\n                    </Avatar>\n                    {chat.otherUser.isOnline && (\n                      <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white dark:border-gray-800 rounded-full\"></div>\n                    )}\n                  </div>\n                  <div className=\"ml-4 flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"font-medium text-gray-900 dark:text-white truncate\">\n                        {chat.otherUser.firstName && chat.otherUser.lastName \n                          ? `${chat.otherUser.firstName} ${chat.otherUser.lastName}`\n                          : chat.otherUser.username || chat.otherUser.email\n                        }\n                      </h3>\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        {formatTime(chat.lastMessage?.createdAt)}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between mt-1\">\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 truncate\">\n                        {chat.lastMessage?.content || \"No messages yet\"}\n                      </p>\n                      <div className=\"flex items-center space-x-1\">\n                        {chat.unreadCount > 0 && (\n                          <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Link>\n          ))\n        ) : (\n          <div className=\"flex flex-col items-center justify-center h-full text-center p-8\">\n            <MessageCircle className=\"w-16 h-16 text-gray-300 dark:text-gray-600 mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No chats yet</h3>\n            <p className=\"text-gray-500 dark:text-gray-400 mb-6\">Start a conversation with someone</p>\n          </div>\n        )}\n      </div>\n\n      <NewChatDialog isOpen={isSearchOpen} setIsOpen={setIsSearchOpen} />\n    </div>\n  );\n}\n","size_bytes":10175},"client/src/components/message-bubble.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { format } from \"date-fns\";\nimport { Check, CheckCheck, Clock, Play, Pause, FileText, Download, Image, Video, Music } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport type { MessageWithUser, User } from \"@shared/schema\";\n\ninterface MessageBubbleProps {\n  message: MessageWithUser;\n  isOwn: boolean;\n  currentUser: User;\n}\n\nfunction UserInitials({ user }: { user: User }) {\n  const name = user.firstName && user.lastName \n    ? `${user.firstName} ${user.lastName}`\n    : user.username || user.email || \"U\";\n  \n  return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n}\n\nfunction FileMessageDisplay({ message, isOwn }: { message: MessageWithUser; isOwn: boolean }) {\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.startsWith('image/')) return Image;\n    if (mimeType.startsWith('video/')) return Video;\n    if (mimeType.startsWith('audio/')) return Music;\n    return FileText;\n  };\n\n  const formatFileSize = (bytes: number | null | undefined) => {\n    if (!bytes || bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const downloadFile = () => {\n    try {\n      const base64Data = message.content;\n      const byteCharacters = atob(base64Data);\n      const byteNumbers = new Array(byteCharacters.length);\n      for (let i = 0; i < byteCharacters.length; i++) {\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\n      }\n      const byteArray = new Uint8Array(byteNumbers);\n      const blob = new Blob([byteArray], { type: message.mimeType || 'application/octet-stream' });\n      \n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = message.fileName || 'download';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Failed to download file:', error);\n    }\n  };\n\n  const FileIcon = getFileIcon(message.mimeType || '');\n\n  return (\n    <div className={`flex items-center space-x-3 p-3 rounded-lg border ${\n      isOwn \n        ? \"bg-white/10 border-white/20\" \n        : \"bg-gray-50 dark:bg-gray-700 border-gray-200 dark:border-gray-600\"\n    }`}>\n      <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n        isOwn ? \"bg-white/20\" : \"bg-blue-100 dark:bg-blue-900\"\n      }`}>\n        <FileIcon className={`w-5 h-5 ${\n          isOwn ? \"text-white\" : \"text-blue-600 dark:text-blue-400\"\n        }`} />\n      </div>\n      <div className=\"flex-1 min-w-0\">\n        <p className={`text-sm font-medium truncate ${\n          isOwn ? \"text-white\" : \"text-gray-900 dark:text-white\"\n        }`}>\n          {message.fileName || 'Unknown file'}\n        </p>\n        <p className={`text-xs ${\n          isOwn ? \"text-white/70\" : \"text-gray-500 dark:text-gray-400\"\n        }`}>\n          {formatFileSize(message.fileSize)}\n        </p>\n      </div>\n      <Button\n        size=\"sm\"\n        variant=\"ghost\"\n        onClick={downloadFile}\n        className={`p-2 ${\n          isOwn \n            ? \"text-white hover:bg-white/20\" \n            : \"text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-600\"\n        }`}\n        data-testid=\"button-file-download\"\n      >\n        <Download className=\"w-4 h-4\" />\n      </Button>\n    </div>\n  );\n}\n\nfunction VoiceMessagePlayer({ audioData, isOwn }: { audioData: string; isOwn: boolean }) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  useEffect(() => {\n    // Create audio element from base64 data\n    const audio = new Audio(`data:audio/webm;base64,${audioData}`);\n    audioRef.current = audio;\n\n    audio.addEventListener('loadedmetadata', () => {\n      setDuration(audio.duration);\n    });\n\n    audio.addEventListener('timeupdate', () => {\n      setCurrentTime(audio.currentTime);\n    });\n\n    audio.addEventListener('ended', () => {\n      setIsPlaying(false);\n      setCurrentTime(0);\n    });\n\n    return () => {\n      audio.pause();\n      audio.src = '';\n    };\n  }, [audioData]);\n\n  const togglePlayback = () => {\n    if (!audioRef.current) return;\n\n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const formatTime = (time: number) => {\n    if (isNaN(time)) return \"0:00\";\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  const progress = duration > 0 ? (currentTime / duration) * 100 : 0;\n\n  return (\n    <div className=\"flex items-center space-x-3\">\n      <Button \n        size=\"sm\" \n        className={`w-8 h-8 rounded-full p-0 ${\n          isOwn \n            ? \"bg-white/20 hover:bg-white/30\" \n            : \"bg-blue-600 hover:bg-blue-700\"\n        }`}\n        onClick={togglePlayback}\n        data-testid=\"button-voice-play\"\n      >\n        {isPlaying ? (\n          <Pause className=\"w-3 h-3 text-white\" />\n        ) : (\n          <Play className=\"w-3 h-3 text-white\" />\n        )}\n      </Button>\n      <div className=\"flex-1\">\n        <div className={`h-1 rounded-full overflow-hidden ${\n          isOwn ? \"bg-white/30\" : \"bg-gray-200 dark:bg-gray-600\"\n        }`}>\n          <div \n            className={`h-full rounded-full transition-all duration-100 ${\n              isOwn ? \"bg-white\" : \"bg-blue-600\"\n            }`}\n            style={{ width: `${progress}%` }}\n          ></div>\n        </div>\n        <span className={`text-xs mt-1 ${\n          isOwn ? \"text-white/80\" : \"text-gray-500 dark:text-gray-400\"\n        }`}>\n          {formatTime(currentTime)} / {formatTime(duration)}\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport function MessageBubble({ message, isOwn, currentUser }: MessageBubbleProps) {\n  const time = format(new Date(message.createdAt || new Date()), \"h:mm a\");\n  \n  if (isOwn) {\n    return (\n      <div className=\"flex items-end justify-end space-x-2 mb-4\">\n        <div className=\"flex flex-col max-w-xs\">\n          <div \n            className={`px-4 py-2 shadow-sm rounded-lg rounded-tr-none ${\n              message.isWhisper\n                ? \"bg-gradient-to-r from-purple-500 to-pink-500 text-white\"\n                : \"text-white\"\n            }`}\n            style={{ \n              backgroundColor: message.isWhisper ? undefined : (currentUser.colorTag || \"#2563eb\")\n            }}\n          >\n            {message.messageType === \"voice\" ? (\n              <VoiceMessagePlayer audioData={message.content} isOwn={true} />\n            ) : message.messageType === \"file\" ? (\n              <FileMessageDisplay message={message} isOwn={true} />\n            ) : (\n              <p>{message.content}</p>\n            )}\n            {message.isWhisper && (\n              <Clock className=\"absolute top-1 right-1 w-3 h-3 text-white opacity-75\" />\n            )}\n          </div>\n          <div className=\"flex items-center justify-end mt-1 mr-2 space-x-1\">\n            <span className=\"text-xs text-gray-500 dark:text-gray-400\">{time}</span>\n            {message.isSeen ? (\n              <CheckCheck className=\"w-3 h-3 text-blue-600\" />\n            ) : (\n              <Check className=\"w-3 h-3 text-gray-400\" />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex items-start space-x-2 mb-4\">\n      <Avatar className=\"w-8 h-8 flex-shrink-0\">\n        <AvatarImage src={message.fromUser.profileImageUrl || undefined} />\n        <AvatarFallback \n          className=\"text-white text-xs font-medium\"\n          style={{ backgroundColor: message.fromUser.colorTag || \"#2563eb\" }}\n        >\n          <UserInitials user={message.fromUser} />\n        </AvatarFallback>\n      </Avatar>\n      <div className=\"flex flex-col max-w-xs\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg rounded-tl-none px-4 py-2 shadow-sm\">\n          {message.messageType === \"voice\" ? (\n            <VoiceMessagePlayer audioData={message.content} isOwn={false} />\n          ) : message.messageType === \"file\" ? (\n            <FileMessageDisplay message={message} isOwn={false} />\n          ) : (\n            <p className=\"text-gray-900 dark:text-white\">{message.content}</p>\n          )}\n        </div>\n        <span className=\"text-xs text-gray-500 dark:text-gray-400 mt-1 ml-2\">{time}</span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8857},"client/src/components/message-input.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Paperclip, Smile, Clock, Mic, Send } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface MessageInputProps {\n  chatId: string;\n  onMessageSent: () => void;\n}\n\nexport function MessageInput({ chatId, onMessageSent }: MessageInputProps) {\n  const [message, setMessage] = useState(\"\");\n  const [isWhisperMode, setIsWhisperMode] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [isSending, setIsSending] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [isUploadingFile, setIsUploadingFile] = useState(false);\n  \n  const typingTimeoutRef = useRef<NodeJS.Timeout>();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n  const recordingTimerRef = useRef<NodeJS.Timeout>();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // Handle typing indicator\n  useEffect(() => {\n    const handleTyping = async (typing: boolean) => {\n      if (isTyping !== typing) {\n        setIsTyping(typing);\n        try {\n          await apiRequest(\"POST\", `/api/chats/${chatId}/typing`, { isTyping: typing });\n        } catch (error) {\n          console.error(\"Failed to set typing indicator:\", error);\n        }\n      }\n    };\n\n    if (message.trim()) {\n      handleTyping(true);\n      \n      // Clear existing timeout\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n      \n      // Set timeout to stop typing indicator\n      typingTimeoutRef.current = setTimeout(() => {\n        handleTyping(false);\n      }, 2000);\n    } else {\n      handleTyping(false);\n    }\n\n    return () => {\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n    };\n  }, [message, chatId, isTyping]);\n\n  // Stop typing when component unmounts\n  useEffect(() => {\n    return () => {\n      if (isTyping) {\n        apiRequest(\"POST\", `/api/chats/${chatId}/typing`, { isTyping: false })\n          .catch(console.error);\n      }\n    };\n  }, [chatId, isTyping]);\n\n  const handleSend = async () => {\n    if (!message.trim() || isSending) return;\n\n    setIsSending(true);\n    const messageContent = message.trim();\n    setMessage(\"\");\n\n    try {\n      // Stop typing indicator\n      if (isTyping) {\n        await apiRequest(\"POST\", `/api/chats/${chatId}/typing`, { isTyping: false });\n        setIsTyping(false);\n      }\n\n      // Send message\n      await apiRequest(\"POST\", `/api/chats/${chatId}/messages`, {\n        content: messageContent,\n        messageType: \"text\",\n        isWhisper: isWhisperMode,\n        toUserId: \"\", // This will be filled by the backend based on chatId\n      });\n\n      onMessageSent();\n    } catch (error) {\n      console.error(\"Failed to send message:\", error);\n      setMessage(messageContent); // Restore message on error\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  // Voice recording functions\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      \n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n      \n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      \n      mediaRecorder.onstop = async () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\n        await sendVoiceMessage(audioBlob);\n        \n        // Stop all tracks to release microphone\n        stream.getTracks().forEach(track => track.stop());\n      };\n      \n      mediaRecorder.start();\n      setIsRecording(true);\n      setRecordingTime(0);\n      \n      // Start timer\n      recordingTimerRef.current = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n      \n    } catch (error) {\n      console.error(\"Failed to start recording:\", error);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      \n      if (recordingTimerRef.current) {\n        clearInterval(recordingTimerRef.current);\n      }\n    }\n  };\n\n  const sendVoiceMessage = async (audioBlob: Blob) => {\n    setIsSending(true);\n    \n    try {\n      // Convert audio to base64\n      const reader = new FileReader();\n      reader.onloadend = async () => {\n        const base64Audio = (reader.result as string).split(',')[1];\n        \n        await apiRequest(\"POST\", `/api/chats/${chatId}/messages`, {\n          content: base64Audio,\n          messageType: \"voice\",\n          isWhisper: isWhisperMode,\n          toUserId: \"\", // This will be filled by the backend based on chatId\n        });\n        \n        onMessageSent();\n      };\n      reader.readAsDataURL(audioBlob);\n    } catch (error) {\n      console.error(\"Failed to send voice message:\", error);\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  // Format recording time\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // File upload functions\n  const handleFileSelect = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    // Validate file size (max 10MB)\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    if (file.size > maxSize) {\n      alert(\"File size too large. Maximum size is 10MB.\");\n      return;\n    }\n\n    await sendFileMessage(file);\n  };\n\n  const sendFileMessage = async (file: File) => {\n    setIsUploadingFile(true);\n    \n    try {\n      // Convert file to base64\n      const reader = new FileReader();\n      reader.onloadend = async () => {\n        const base64File = (reader.result as string).split(',')[1];\n        \n        await apiRequest(\"POST\", `/api/chats/${chatId}/messages`, {\n          content: base64File,\n          messageType: \"file\",\n          fileName: file.name,\n          fileSize: file.size,\n          mimeType: file.type,\n          isWhisper: isWhisperMode,\n          toUserId: \"\", // This will be filled by the backend based on chatId\n        });\n        \n        onMessageSent();\n      };\n      reader.readAsDataURL(file);\n    } catch (error) {\n      console.error(\"Failed to send file:\", error);\n    } finally {\n      setIsUploadingFile(false);\n      // Reset file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 p-4\">\n      <div className=\"flex items-end space-x-3\">\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"p-2 text-gray-500 dark:text-gray-400 hover:text-blue-600\"\n          onClick={handleFileSelect}\n          disabled={isUploadingFile || isSending}\n          data-testid=\"button-file-upload\"\n        >\n          <Paperclip className=\"w-5 h-5\" />\n        </Button>\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          onChange={handleFileChange}\n          className=\"hidden\"\n          data-testid=\"input-file-upload\"\n        />\n        \n        <div className=\"flex-1\">\n          <div className=\"bg-gray-100 dark:bg-gray-700 rounded-full px-4 py-2 flex items-center space-x-2\">\n            <Input\n              ref={inputRef}\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Type a message...\"\n              className=\"flex-1 bg-transparent border-none outline-none focus-visible:ring-0 focus-visible:ring-offset-0 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 px-0\"\n              disabled={isSending}\n            />\n            <Button variant=\"ghost\" size=\"sm\" className=\"p-1 text-gray-500 dark:text-gray-400 hover:text-blue-600\">\n              <Smile className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          {/* Whisper Mode Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className={`p-2 transition-colors ${\n              isWhisperMode \n                ? \"text-purple-500 hover:text-purple-600\" \n                : \"text-gray-500 dark:text-gray-400 hover:text-purple-500\"\n            }`}\n            onClick={() => setIsWhisperMode(!isWhisperMode)}\n            title=\"Whisper Mode (10s auto-delete)\"\n          >\n            <Clock className=\"w-5 h-5\" />\n          </Button>\n          \n          {/* Voice Record Button */}\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className={`p-2 transition-colors ${\n              isRecording \n                ? \"text-red-500 hover:text-red-600 bg-red-50 dark:bg-red-900/20\" \n                : \"text-gray-500 dark:text-gray-400 hover:text-blue-600\"\n            }`}\n            onClick={isRecording ? stopRecording : startRecording}\n            disabled={isSending}\n            title={isRecording ? \"Stop Recording\" : \"Voice Message\"}\n            data-testid=\"button-voice-record\"\n          >\n            <Mic className=\"w-5 h-5\" />\n          </Button>\n          \n          {/* Send Button */}\n          <Button\n            onClick={handleSend}\n            disabled={!message.trim() || isSending}\n            className=\"p-2 bg-blue-600 text-white rounded-full hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <Send className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      </div>\n      \n      {isWhisperMode && (\n        <div className=\"mt-2 text-xs text-purple-500 dark:text-purple-400 text-center\">\n          Whisper mode: Messages will self-destruct in 10 seconds\n        </div>\n      )}\n      \n      {isRecording && (\n        <div className=\"mt-2 flex items-center justify-center space-x-2\">\n          <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\"></div>\n          <span className=\"text-sm text-red-500 font-medium\">Recording... {formatTime(recordingTime)}</span>\n          <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\"></div>\n        </div>\n      )}\n      \n      {isUploadingFile && (\n        <div className=\"mt-2 flex items-center justify-center space-x-2\">\n          <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\n          <span className=\"text-sm text-blue-500 font-medium\">Uploading file...</span>\n          <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":11541},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const saved = localStorage.getItem(\"theme\");\n    if (saved === \"light\" || saved === \"dark\") return saved;\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.remove(\"dark\");\n    }\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1281},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/chat-room.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ArrowLeft, Phone, Video, MoreVertical } from \"lucide-react\";\nimport { Link, useParams } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { MessageBubble } from \"@/components/message-bubble\";\nimport { MessageInput } from \"@/components/message-input\";\nimport { CallManager, CallButtons } from \"@/components/call-manager\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { MessageWithUser, TypingIndicator } from \"@shared/schema\";\n\nfunction UserInitials({ user }: { user: any }) {\n  const name = user.firstName && user.lastName \n    ? `${user.firstName} ${user.lastName}`\n    : user.username || user.email || \"U\";\n  \n  return name.split(' ').map((n: string) => n[0]).join('').toUpperCase().slice(0, 2);\n}\n\nfunction TypingIndicator() {\n  return (\n    <div className=\"flex items-start space-x-2 mb-4\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg rounded-tl-none px-4 py-3 shadow-sm\">\n        <div className=\"flex space-x-1\">\n          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: \"0.1s\" }}></div>\n          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: \"0.2s\" }}></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function ChatRoom() {\n  const { chatId } = useParams<{ chatId: string }>();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const [otherUser, setOtherUser] = useState<any>(null);\n\n  const { data: messages, refetch: refetchMessages, error: messagesError } = useQuery<MessageWithUser[]>({\n    queryKey: [\"/api/chats\", chatId, \"messages\"],\n    refetchInterval: 2000, // Poll every 2 seconds for new messages\n    enabled: !!chatId,\n  });\n\n  const { data: typingIndicators } = useQuery<TypingIndicator[]>({\n    queryKey: [\"/api/chats\", chatId, \"typing\"],\n    refetchInterval: 1000, // Poll every second for typing indicators\n    enabled: !!chatId,\n  });\n\n  // Handle unauthorized errors\n  useEffect(() => {\n    if (messagesError && isUnauthorizedError(messagesError as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [messagesError, toast]);\n\n  // Get other user from messages\n  useEffect(() => {\n    if (messages && Array.isArray(messages) && messages.length > 0 && user) {\n      const firstMessage = messages[0];\n      const other = firstMessage.fromUser.id === user.id \n        ? messages.find(m => m.fromUser.id !== user.id)?.fromUser\n        : firstMessage.fromUser;\n      \n      if (other) {\n        setOtherUser(other);\n      }\n    }\n  }, [messages, user]);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleMessageSent = () => {\n    refetchMessages();\n  };\n\n  const handleStartCall = (receiverId: string, receiverName: string, callType: 'voice' | 'video') => {\n    // Call functionality is handled by CallManager component\n    console.log(`Starting ${callType} call with ${receiverName}`);\n  };\n\n  if (!chatId || !user) {\n    return <div className=\"flex items-center justify-center h-screen\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"flex flex-col h-screen\">\n      {/* Chat Header */}\n      <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3 flex items-center\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"mr-3 p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full\">\n            <ArrowLeft className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\n          </Button>\n        </Link>\n        \n        <div className=\"flex items-center flex-1\">\n          {otherUser && (\n            <>\n              <div className=\"relative\">\n                <Avatar className=\"w-10 h-10\">\n                  <AvatarImage src={otherUser.profileImageUrl || undefined} />\n                  <AvatarFallback \n                    className=\"text-white font-medium\"\n                    style={{ backgroundColor: otherUser.colorTag || \"#2563eb\" }}\n                  >\n                    <UserInitials user={otherUser} />\n                  </AvatarFallback>\n                </Avatar>\n                {otherUser.isOnline && (\n                  <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 border-2 border-white dark:border-gray-800 rounded-full\"></div>\n                )}\n              </div>\n              <div className=\"ml-3\">\n                <h3 className=\"font-medium text-gray-900 dark:text-white\">\n                  {otherUser.firstName && otherUser.lastName \n                    ? `${otherUser.firstName} ${otherUser.lastName}`\n                    : otherUser.username || otherUser.email\n                  }\n                </h3>\n                <p className=\"text-xs text-green-500\">\n                  {otherUser.isOnline ? \"Online\" : \"Offline\"}\n                </p>\n              </div>\n            </>\n          )}\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          {otherUser && (\n            <CallButtons\n              userId={otherUser.id}\n              userName={otherUser.firstName && otherUser.lastName \n                ? `${otherUser.firstName} ${otherUser.lastName}`\n                : otherUser.username || otherUser.email\n              }\n              onStartCall={handleStartCall}\n            />\n          )}\n          <Button variant=\"ghost\" size=\"sm\" className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full\">\n            <MoreVertical className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Messages Container */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50 dark:bg-gray-900\">\n        {messages && Array.isArray(messages) && messages.length > 0 ? (\n          messages.map((message: MessageWithUser) => (\n            <MessageBubble\n              key={message.id}\n              message={message}\n              isOwn={message.fromUserId === user.id}\n              currentUser={user}\n            />\n          ))\n        ) : (\n          <div className=\"flex items-center justify-center h-full text-center\">\n            <div>\n              <p className=\"text-gray-500 dark:text-gray-400 mb-2\">No messages yet</p>\n              <p className=\"text-sm text-gray-400 dark:text-gray-500\">Start the conversation!</p>\n            </div>\n          </div>\n        )}\n        \n        {/* Typing Indicator */}\n        {typingIndicators && Array.isArray(typingIndicators) && typingIndicators.length > 0 && <TypingIndicator />}\n        \n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Message Input */}\n      <MessageInput chatId={chatId} onMessageSent={handleMessageSent} />\n      \n      {/* Call Manager */}\n      <CallManager \n        currentUserId={user.id} \n        currentUserName={user.firstName && user.lastName \n          ? `${user.firstName} ${user.lastName}`\n          : user.username || user.email\n        }\n      />\n    </div>\n  );\n}\n","size_bytes":7630},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { Route, Switch, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ChatList } from \"@/components/chat-list\";\nimport ChatRoom from \"./chat-room\";\nimport Profile from \"./profile\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Home() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [location] = useLocation();\n\n  // Set user online status when app loads\n  useEffect(() => {\n    const setOnlineStatus = async (isOnline: boolean) => {\n      try {\n        await apiRequest(\"POST\", \"/api/users/online-status\", { isOnline });\n      } catch (error) {\n        console.error(\"Failed to update online status:\", error);\n      }\n    };\n\n    // Set online when component mounts\n    setOnlineStatus(true);\n\n    // Set offline when page unloads\n    const handleBeforeUnload = () => setOnlineStatus(false);\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\n\n    // Set online when page becomes visible, offline when hidden\n    const handleVisibilityChange = () => {\n      setOnlineStatus(!document.hidden);\n    };\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n\n    return () => {\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n      setOnlineStatus(false);\n    };\n  }, []);\n\n  // Clean up whisper messages and typing indicators periodically\n  useEffect(() => {\n    const cleanup = async () => {\n      try {\n        await Promise.all([\n          apiRequest(\"POST\", \"/api/cleanup/whisper-messages\", {}),\n          apiRequest(\"POST\", \"/api/cleanup/typing-indicators\", {}),\n        ]);\n      } catch (error) {\n        console.error(\"Cleanup error:\", error);\n      }\n    };\n\n    // Run cleanup every 30 seconds\n    const interval = setInterval(cleanup, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  if (!user) {\n    return <div className=\"flex items-center justify-center min-h-screen\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"max-w-md mx-auto bg-white dark:bg-gray-900 min-h-screen relative shadow-xl\">\n      <Switch>\n        <Route path=\"/\" component={ChatList} />\n        <Route path=\"/chat/:chatId\" component={ChatRoom} />\n        <Route path=\"/profile\" component={Profile} />\n      </Switch>\n    </div>\n  );\n}\n","size_bytes":2439},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { MessageCircle } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-xl border-0\">\n          <CardContent className=\"p-8 text-center\">\n            {/* Logo/Brand */}\n            <div className=\"mb-8\">\n              <div className=\"w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <MessageCircle className=\"text-white\" size={32} />\n              </div>\n              <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-white\">MinimalChat</h1>\n              <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Simple, secure messaging</p>\n            </div>\n\n            {/* Features */}\n            <div className=\"space-y-4 mb-8 text-left\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\n                <span className=\"text-sm text-gray-700 dark:text-gray-300\">Real-time messaging</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\n                <span className=\"text-sm text-gray-700 dark:text-gray-300\">Whisper mode messages</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\n                <span className=\"text-sm text-gray-700 dark:text-gray-300\">Custom color themes</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\n                <span className=\"text-sm text-gray-700 dark:text-gray-300\">Minimalist design</span>\n              </div>\n            </div>\n\n            {/* Sign In Button */}\n            <Button \n              onClick={() => window.location.href = '/api/auth/google'}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-medium transition-colors duration-200\"\n            >\n              Sign In with Google\n            </Button>\n\n            <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-4\">\n              Secure authentication powered by Google\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2599},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ArrowLeft, Camera, QrCode } from \"lucide-react\";\nimport QRCode from \"qrcode\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { UpdateUser } from \"@shared/schema\";\n\nconst colorOptions = [\n  { name: \"Blue\", value: \"#2563eb\" },\n  { name: \"Green\", value: \"#10b981\" },\n  { name: \"Purple\", value: \"#8b5cf6\" },\n  { name: \"Pink\", value: \"#ec4899\" },\n  { name: \"Orange\", value: \"#f97316\" },\n  { name: \"Red\", value: \"#ef4444\" },\n  { name: \"Indigo\", value: \"#6366f1\" },\n  { name: \"Teal\", value: \"#14b8a6\" },\n];\n\nfunction UserInitials({ user }: { user: any }) {\n  const name = user.firstName && user.lastName \n    ? `${user.firstName} ${user.lastName}`\n    : user.username || user.email || \"U\";\n  \n  return name.split(' ').map((n: string) => n[0]).join('').toUpperCase().slice(0, 2);\n}\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [formData, setFormData] = useState({\n    username: \"\",\n    bio: \"\",\n    colorTag: \"#2563eb\",\n  });\n  const [profileImage, setProfileImage] = useState<string | null>(null);\n  const [qrCodeDataUrl, setQrCodeDataUrl] = useState<string | null>(null);\n\n  // Initialize form data when user loads\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        username: user.username || \"\",\n        bio: user.bio || \"\",\n        colorTag: user.colorTag || \"#2563eb\",\n      });\n    }\n  }, [user]);\n\n  // Generate QR code when user data is available\n  useEffect(() => {\n    if (user) {\n      const contactData = {\n        name: user.firstName && user.lastName \n          ? `${user.firstName} ${user.lastName}`\n          : user.username || user.email,\n        email: user.email,\n        userId: user.id\n      };\n      \n      QRCode.toDataURL(JSON.stringify(contactData), {\n        width: 128,\n        margin: 2,\n        color: {\n          dark: '#000000',\n          light: '#FFFFFF'\n        }\n      }).then(url => {\n        setQrCodeDataUrl(url);\n      }).catch(err => {\n        console.error('Error generating QR code:', err);\n      });\n    }\n  }, [user]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (updates: UpdateUser & { profileImageUrl?: string }) => {\n      await apiRequest(\"PUT\", \"/api/users/profile\", updates);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const updates = { ...formData };\n    if (profileImage) {\n      (updates as any).profileImageUrl = profileImage;\n    }\n    updateProfileMutation.mutate(updates);\n  };\n\n  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      // Check file size (limit to 2MB)\n      if (file.size > 2 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Please select an image smaller than 2MB.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Check file type\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please select an image file.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const result = event.target?.result as string;\n        setProfileImage(result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  // Handle authentication redirect properly\n  useEffect(() => {\n    if (!user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [user, toast]);\n\n  if (!user) {\n    return <div className=\"flex items-center justify-center h-screen\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"flex flex-col h-screen\">\n      {/* Profile Header */}\n      <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3 flex items-center\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"mr-3 p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full\">\n            <ArrowLeft className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\n          </Button>\n        </Link>\n        <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white\">Profile</h1>\n      </div>\n\n      {/* Profile Content */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Profile Picture Section */}\n          <div className=\"text-center mb-8\">\n            <div className=\"relative inline-block\">\n              <Avatar className=\"w-24 h-24 mx-auto\">\n                <AvatarImage src={profileImage || user?.profileImageUrl || undefined} />\n                <AvatarFallback \n                  className=\"text-white text-2xl font-medium\"\n                  style={{ backgroundColor: formData.colorTag }}\n                >\n                  <UserInitials user={user || {}} />\n                </AvatarFallback>\n              </Avatar>\n              <input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleImageUpload}\n                className=\"hidden\"\n                id=\"profile-image-upload\"\n                data-testid=\"input-profile-image\"\n              />\n              <Button\n                type=\"button\"\n                size=\"sm\"\n                className=\"absolute bottom-0 right-0 w-8 h-8 bg-blue-600 text-white rounded-full p-0\"\n                onClick={() => document.getElementById('profile-image-upload')?.click()}\n                data-testid=\"button-upload-image\"\n              >\n                <Camera className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            <h2 className=\"text-xl font-semibold mt-4 text-gray-900 dark:text-white\">\n              {user.firstName && user.lastName \n                ? `${user.firstName} ${user.lastName}`\n                : user.username || user.email\n              }\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-400\">{user.email}</p>\n          </div>\n\n          {/* Profile Settings */}\n          <div className=\"space-y-6\">\n            {/* Username */}\n            <div>\n              <Label htmlFor=\"username\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Username\n              </Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={formData.username}\n                onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                placeholder=\"Enter your username\"\n                className=\"w-full\"\n              />\n            </div>\n\n            {/* Bio */}\n            <div>\n              <Label htmlFor=\"bio\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Bio\n              </Label>\n              <Textarea\n                id=\"bio\"\n                rows={3}\n                value={formData.bio}\n                onChange={(e) => setFormData({ ...formData, bio: e.target.value })}\n                placeholder=\"Write something about yourself...\"\n                className=\"w-full\"\n              />\n            </div>\n\n            {/* Color Tag */}\n            <div>\n              <Label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Chat Bubble Color\n              </Label>\n              <div className=\"flex flex-wrap gap-3\">\n                {colorOptions.map((color) => (\n                  <button\n                    key={color.value}\n                    type=\"button\"\n                    className={`w-10 h-10 rounded-full border-2 transition-all ${\n                      formData.colorTag === color.value\n                        ? \"border-white dark:border-gray-700 shadow-lg scale-110\"\n                        : \"border-gray-200 dark:border-gray-600 hover:scale-105\"\n                    }`}\n                    style={{ backgroundColor: color.value }}\n                    onClick={() => setFormData({ ...formData, colorTag: color.value })}\n                    title={color.name}\n                  />\n                ))}\n              </div>\n            </div>\n\n            {/* Save Button */}\n            <Button\n              type=\"submit\"\n              disabled={updateProfileMutation.isPending}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-medium\"\n            >\n              {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n\n            {/* QR Code */}\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <Label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Your QR Code\n                </Label>\n                <div className=\"w-32 h-32 bg-white rounded-lg mx-auto flex items-center justify-center mb-3 border border-gray-200\">\n                  {qrCodeDataUrl ? (\n                    <img \n                      src={qrCodeDataUrl} \n                      alt=\"User contact QR code\" \n                      className=\"w-full h-full\"\n                      data-testid=\"qr-code-image\"\n                    />\n                  ) : (\n                    <QrCode className=\"w-16 h-16 text-gray-400\" />\n                  )}\n                </div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Share this QR code for quick contact add\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Settings Options */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between py-3 border-b border-gray-200 dark:border-gray-600\">\n                <Label htmlFor=\"dark-mode\" className=\"text-gray-900 dark:text-white\">Dark Mode</Label>\n                <Switch\n                  id=\"dark-mode\"\n                  checked={theme === \"dark\"}\n                  onCheckedChange={toggleTheme}\n                  data-testid=\"switch-dark-mode\"\n                />\n              </div>\n            </div>\n\n            {/* Logout Button */}\n            <Button\n              type=\"button\"\n              onClick={handleLogout}\n              variant=\"destructive\"\n              className=\"w-full py-3 rounded-lg font-medium mt-6\"\n            >\n              Sign Out\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12187},"client/src/pages/todo.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Trash2, Edit2, Plus, CheckCircle2, Circle, Flame, Zap, Leaf, ArrowLeft } from 'lucide-react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\n\ninterface Todo {\n  id: string;\n  text: string;\n  completed: boolean;\n  createdAt: Date;\n  priority: 'low' | 'medium' | 'high';\n}\n\ntype FilterType = 'all' | 'active' | 'completed';\n\nexport default function TodoPage() {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [inputText, setInputText] = useState('');\n  const [filter, setFilter] = useState<FilterType>('all');\n  const [priority, setPriority] = useState<'low' | 'medium' | 'high'>('medium');\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editText, setEditText] = useState('');\n\n  // Load todos from localStorage on mount\n  useEffect(() => {\n    const savedTodos = localStorage.getItem('todos');\n    if (savedTodos) {\n      const parsedTodos = JSON.parse(savedTodos).map((todo: any) => ({\n        ...todo,\n        createdAt: new Date(todo.createdAt)\n      }));\n      setTodos(parsedTodos);\n    }\n  }, []);\n\n  // Save todos to localStorage whenever todos change\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const addTodo = () => {\n    if (inputText.trim() === '') return;\n\n    const newTodo: Todo = {\n      id: Date.now().toString(),\n      text: inputText.trim(),\n      completed: false,\n      createdAt: new Date(),\n      priority\n    };\n\n    setTodos([newTodo, ...todos]);\n    setInputText('');\n  };\n\n  const toggleTodo = (id: string) => {\n    setTodos(todos.map(todo =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  const deleteTodo = (id: string) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const startEdit = (id: string, text: string) => {\n    setEditingId(id);\n    setEditText(text);\n  };\n\n  const saveEdit = () => {\n    if (editText.trim() === '') return;\n    \n    setTodos(todos.map(todo =>\n      todo.id === editingId ? { ...todo, text: editText.trim() } : todo\n    ));\n    setEditingId(null);\n    setEditText('');\n  };\n\n  const cancelEdit = () => {\n    setEditingId(null);\n    setEditText('');\n  };\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  const filteredTodos = todos.filter(todo => {\n    switch (filter) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n\n  const activeTodosCount = todos.filter(todo => !todo.completed).length;\n  const completedTodosCount = todos.filter(todo => todo.completed).length;\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'high': return <Flame className=\"w-4 h-4 text-red-500\" />;\n      case 'medium': return <Zap className=\"w-4 h-4 text-orange-500\" />;\n      case 'low': return <Leaf className=\"w-4 h-4 text-green-500\" />;\n      default: return <Leaf className=\"w-4 h-4 text-green-500\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'destructive';\n      case 'medium': return 'secondary';\n      case 'low': return 'outline';\n      default: return 'outline';\n    }\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto bg-white dark:bg-gray-900 min-h-screen relative shadow-xl\">\n      {/* Header with Navigation */}\n      <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full\">\n              <ArrowLeft className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\n            </Button>\n          </Link>\n          <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white\">Todo</h1>\n        </div>\n        <p className=\"text-sm text-muted-foreground\">\n          {activeTodosCount} active ‚Ä¢ {completedTodosCount} done\n        </p>\n      </div>\n\n      <div className=\"p-4 space-y-6\">\n\n      {/* Add Todo Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Add New Task</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Priority Selector */}\n          <div className=\"flex gap-2\">\n            {(['low', 'medium', 'high'] as const).map((p) => (\n              <Button\n                key={p}\n                variant={priority === p ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setPriority(p)}\n                className=\"flex items-center gap-1\"\n              >\n                {getPriorityIcon(p)}\n                {p.charAt(0).toUpperCase() + p.slice(1)}\n              </Button>\n            ))}\n          </div>\n          \n          {/* Input Section */}\n          <div className=\"flex gap-2\">\n            <Input\n              value={inputText}\n              onChange={(e) => setInputText(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && addTodo()}\n              placeholder=\"What needs to be done?\"\n              className=\"flex-1\"\n            />\n            <Button onClick={addTodo} size=\"icon\">\n              <Plus className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Filter Tabs */}\n      <Tabs value={filter} onValueChange={(value) => setFilter(value as FilterType)}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"all\">All ({todos.length})</TabsTrigger>\n          <TabsTrigger value=\"active\">Active ({activeTodosCount})</TabsTrigger>\n          <TabsTrigger value=\"completed\">Done ({completedTodosCount})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={filter} className=\"space-y-4\">\n          {filteredTodos.length === 0 ? (\n            <Alert>\n              <AlertDescription className=\"text-center\">\n                {filter === 'all' \n                  ? 'No todos yet. Add your first task above!'\n                  : filter === 'active'\n                  ? 'No active tasks. Great job!'\n                  : 'No completed tasks yet. Keep going!'\n                }\n              </AlertDescription>\n            </Alert>\n          ) : (\n            <div className=\"space-y-3\">\n              {filteredTodos.map((todo) => (\n                <Card key={todo.id} className={`transition-all ${todo.completed ? 'opacity-60' : ''}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start gap-3\">\n                      {/* Checkbox */}\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => toggleTodo(todo.id)}\n                        className=\"mt-0.5 p-0 h-6 w-6\"\n                      >\n                        {todo.completed ? (\n                          <CheckCircle2 className=\"w-5 h-5 text-green-500\" />\n                        ) : (\n                          <Circle className=\"w-5 h-5 text-muted-foreground\" />\n                        )}\n                      </Button>\n\n                      {/* Content */}\n                      <div className=\"flex-1 space-y-2\">\n                        {editingId === todo.id ? (\n                          <div className=\"flex gap-2\">\n                            <Input\n                              value={editText}\n                              onChange={(e) => setEditText(e.target.value)}\n                              onKeyPress={(e) => {\n                                if (e.key === 'Enter') saveEdit();\n                                if (e.key === 'Escape') cancelEdit();\n                              }}\n                              onBlur={saveEdit}\n                              className=\"flex-1\"\n                              autoFocus\n                            />\n                            <Button size=\"sm\" onClick={saveEdit}>Save</Button>\n                            <Button size=\"sm\" variant=\"outline\" onClick={cancelEdit}>Cancel</Button>\n                          </div>\n                        ) : (\n                          <>\n                            <p \n                              className={`cursor-pointer ${todo.completed ? 'line-through text-muted-foreground' : ''}`}\n                              onDoubleClick={() => startEdit(todo.id, todo.text)}\n                            >\n                              {todo.text}\n                            </p>\n                            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                              <Badge variant={getPriorityColor(todo.priority)} className=\"flex items-center gap-1\">\n                                {getPriorityIcon(todo.priority)}\n                                {todo.priority}\n                              </Badge>\n                              <span>{todo.createdAt.toLocaleDateString()}</span>\n                            </div>\n                          </>\n                        )}\n                      </div>\n\n                      {/* Actions */}\n                      {editingId !== todo.id && (\n                        <div className=\"flex gap-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => startEdit(todo.id, todo.text)}\n                          >\n                            <Edit2 className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => deleteTodo(todo.id)}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n        {/* Clear Completed Button */}\n        {completedTodosCount > 0 && (\n          <Card>\n            <CardContent className=\"p-4\">\n              <Button \n                variant=\"destructive\" \n                onClick={clearCompleted}\n                className=\"w-full\"\n              >\n                Clear {completedTodosCount} completed task{completedTodosCount > 1 ? 's' : ''}\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":11013},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/call-manager.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { Phone, PhoneCall, Video, VideoOff, Mic, MicOff, PhoneOff } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { webrtcService } from '@/lib/webrtc';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface CallManagerProps {\n  currentUserId: string;\n  currentUserName: string;\n}\n\ninterface IncomingCall {\n  callId: string;\n  callerId: string;\n  callerName: string;\n  callType: 'voice' | 'video';\n}\n\n// Global call manager instance\nlet globalCallManager: {\n  startCall: (receiverId: string, receiverName: string, callType: 'voice' | 'video') => Promise<void>;\n} | null = null;\n\nexport function CallManager({ currentUserId, currentUserName }: CallManagerProps) {\n  const [incomingCall, setIncomingCall] = useState<IncomingCall | null>(null);\n  const [activeCall, setActiveCall] = useState<{\n    callId: string;\n    otherUserName: string;\n    callType: 'voice' | 'video';\n    isOutgoing: boolean;\n    status: 'connecting' | 'ringing' | 'active';\n  } | null>(null);\n  \n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  \n  const localVideoRef = useRef<HTMLVideoElement>(null);\n  const remoteVideoRef = useRef<HTMLVideoElement>(null);\n  const remoteAudioRef = useRef<HTMLAudioElement>(null);\n  \n  const { toast } = useToast();\n\n  // Define startCall method\n  const startCall = async (receiverId: string, receiverName: string, callType: 'voice' | 'video') => {\n    setActiveCall({\n      callId: 'temp',\n      otherUserName: receiverName,\n      callType,\n      isOutgoing: true,\n      status: 'connecting'\n    });\n\n    try {\n      await webrtcService.startCall(receiverId, callType, currentUserName);\n      setActiveCall(prev => prev ? { ...prev, status: 'ringing' } : null);\n    } catch (error) {\n      setActiveCall(null);\n      toast({\n        title: \"Failed to start call\",\n        description: \"Could not access camera or microphone\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    // Expose call functionality globally\n    globalCallManager = { startCall };\n    \n    // Connect to WebRTC service\n    webrtcService.connect(currentUserId);\n\n    // Set up event handlers\n    webrtcService.onIncomingCall = (callInfo) => {\n      setIncomingCall(callInfo);\n    };\n\n    webrtcService.onCallAnswered = () => {\n      setActiveCall(prev => prev ? { ...prev, status: 'active' } : null);\n    };\n\n    webrtcService.onCallRejected = () => {\n      setActiveCall(null);\n      toast({\n        title: \"Call rejected\",\n        description: \"The call was rejected\",\n      });\n    };\n\n    webrtcService.onCallEnded = (reason) => {\n      setActiveCall(null);\n      setIncomingCall(null);\n      if (reason) {\n        toast({\n          title: \"Call ended\",\n          description: reason,\n        });\n      }\n    };\n\n    webrtcService.onCallFailed = (reason) => {\n      setActiveCall(null);\n      toast({\n        title: \"Call failed\",\n        description: reason,\n        variant: \"destructive\",\n      });\n    };\n\n    webrtcService.onLocalStream = (stream) => {\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n      }\n    };\n\n    webrtcService.onRemoteStream = (stream) => {\n      if (remoteVideoRef.current) {\n        remoteVideoRef.current.srcObject = stream;\n      }\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = stream;\n      }\n    };\n\n    return () => {\n      globalCallManager = null;\n      webrtcService.disconnect();\n    };\n  }, [currentUserId, toast]);\n\n  const answerCall = async () => {\n    if (!incomingCall) return;\n\n    setActiveCall({\n      callId: incomingCall.callId,\n      otherUserName: incomingCall.callerName,\n      callType: incomingCall.callType,\n      isOutgoing: false,\n      status: 'connecting'\n    });\n\n    await webrtcService.answerCall(incomingCall.callId, incomingCall.callType);\n    setIncomingCall(null);\n  };\n\n  const rejectCall = () => {\n    if (!incomingCall) return;\n    webrtcService.rejectCall(incomingCall.callId);\n    setIncomingCall(null);\n  };\n\n  const endCall = () => {\n    webrtcService.endCall();\n    setActiveCall(null);\n  };\n\n  const toggleMute = () => {\n    const newMuted = webrtcService.toggleMute();\n    setIsMuted(newMuted);\n  };\n\n  const toggleVideo = () => {\n    const newVideoOff = webrtcService.toggleVideo();\n    setIsVideoOff(newVideoOff);\n  };\n\n  return (\n    <>\n      {/* Incoming call dialog */}\n      <Dialog open={!!incomingCall} onOpenChange={() => setIncomingCall(null)}>\n        <DialogContent className=\"sm:max-w-md\" data-testid=\"dialog-incoming-call\">\n          <DialogHeader>\n            <DialogTitle>Incoming {incomingCall?.callType} call</DialogTitle>\n            <DialogDescription>\n              {incomingCall?.callerName} is calling you\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex justify-center gap-4 mt-6\">\n            <Button\n              onClick={rejectCall}\n              variant=\"destructive\"\n              size=\"lg\"\n              className=\"rounded-full p-4\"\n              data-testid=\"button-reject-call\"\n            >\n              <PhoneOff className=\"h-6 w-6\" />\n            </Button>\n            <Button\n              onClick={answerCall}\n              variant=\"default\"\n              size=\"lg\"\n              className=\"rounded-full p-4 bg-green-600 hover:bg-green-700\"\n              data-testid=\"button-answer-call\"\n            >\n              {incomingCall?.callType === 'video' ? (\n                <Video className=\"h-6 w-6\" />\n              ) : (\n                <Phone className=\"h-6 w-6\" />\n              )}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Active call dialog */}\n      <Dialog open={!!activeCall} onOpenChange={() => {}}>\n        <DialogContent className=\"sm:max-w-2xl h-[600px]\" data-testid=\"dialog-active-call\">\n          <DialogHeader>\n            <DialogTitle>\n              {activeCall?.callType === 'video' ? 'Video Call' : 'Voice Call'} with {activeCall?.otherUserName}\n            </DialogTitle>\n            <DialogDescription>\n              {activeCall?.status === 'connecting' && 'Connecting...'}\n              {activeCall?.status === 'ringing' && 'Ringing...'}\n              {activeCall?.status === 'active' && 'Call in progress'}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"flex-1 relative\">\n            {activeCall?.callType === 'video' && (\n              <>\n                {/* Remote video */}\n                <video\n                  ref={remoteVideoRef}\n                  autoPlay\n                  playsInline\n                  className=\"w-full h-full object-cover bg-gray-900 rounded-lg\"\n                  data-testid=\"video-remote\"\n                />\n                \n                {/* Local video (picture-in-picture) */}\n                <video\n                  ref={localVideoRef}\n                  autoPlay\n                  playsInline\n                  muted\n                  className=\"absolute top-4 right-4 w-32 h-24 object-cover bg-gray-700 rounded-lg border-2 border-white\"\n                  data-testid=\"video-local\"\n                />\n              </>\n            )}\n            \n            {activeCall?.callType === 'voice' && (\n              <div className=\"flex items-center justify-center h-full bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg\">\n                <div className=\"text-center text-white\">\n                  <div className=\"w-24 h-24 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Phone className=\"h-12 w-12\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold\">{activeCall.otherUserName}</h3>\n                  <p className=\"text-white/80\">{activeCall.status}</p>\n                </div>\n                {/* Audio element for voice calls */}\n                <audio ref={remoteAudioRef} autoPlay style={{ display: 'none' }} />\n              </div>\n            )}\n          </div>\n\n          {/* Call controls */}\n          <div className=\"flex justify-center gap-4 mt-4\">\n            <Button\n              onClick={toggleMute}\n              variant={isMuted ? \"destructive\" : \"secondary\"}\n              size=\"lg\"\n              className=\"rounded-full p-4\"\n              data-testid=\"button-toggle-mute\"\n            >\n              {isMuted ? <MicOff className=\"h-6 w-6\" /> : <Mic className=\"h-6 w-6\" />}\n            </Button>\n            \n            {activeCall?.callType === 'video' && (\n              <Button\n                onClick={toggleVideo}\n                variant={isVideoOff ? \"destructive\" : \"secondary\"}\n                size=\"lg\"\n                className=\"rounded-full p-4\"\n                data-testid=\"button-toggle-video\"\n              >\n                {isVideoOff ? <VideoOff className=\"h-6 w-6\" /> : <Video className=\"h-6 w-6\" />}\n              </Button>\n            )}\n            \n            <Button\n              onClick={endCall}\n              variant=\"destructive\"\n              size=\"lg\"\n              className=\"rounded-full p-4\"\n              data-testid=\"button-end-call\"\n            >\n              <PhoneOff className=\"h-6 w-6\" />\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\n// Call action buttons component for chat interface\ninterface CallButtonsProps {\n  userId: string;\n  userName: string;\n  onStartCall: (receiverId: string, receiverName: string, callType: 'voice' | 'video') => void;\n}\n\nexport function CallButtons({ userId, userName, onStartCall }: CallButtonsProps) {\n  const handleVoiceCall = () => {\n    if (globalCallManager) {\n      globalCallManager.startCall(userId, userName, 'voice');\n    } else {\n      onStartCall(userId, userName, 'voice');\n    }\n  };\n\n  const handleVideoCall = () => {\n    if (globalCallManager) {\n      globalCallManager.startCall(userId, userName, 'video');\n    } else {\n      onStartCall(userId, userName, 'video');\n    }\n  };\n\n  return (\n    <div className=\"flex gap-2\">\n      <Button\n        onClick={handleVoiceCall}\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"rounded-full p-2\"\n        data-testid={`button-voice-call-${userId}`}\n      >\n        <PhoneCall className=\"h-4 w-4\" />\n      </Button>\n      <Button\n        onClick={handleVideoCall}\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"rounded-full p-2\"\n        data-testid={`button-video-call-${userId}`}\n      >\n        <Video className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n}","size_bytes":10731},"client/src/lib/webrtc.ts":{"content":"export class WebRTCService {\n  private ws: WebSocket | null = null;\n  private peerConnection: RTCPeerConnection | null = null;\n  private localStream: MediaStream | null = null;\n  private remoteStream: MediaStream | null = null;\n  private currentCallId: string | null = null;\n  private userId: string | null = null;\n\n  // Event handlers\n  onIncomingCall?: (callInfo: {\n    callId: string;\n    callerId: string;\n    callerName: string;\n    callType: 'voice' | 'video';\n  }) => void;\n  \n  onCallAnswered?: () => void;\n  onCallRejected?: () => void;\n  onCallEnded?: (reason?: string) => void;\n  onRemoteStream?: (stream: MediaStream) => void;\n  onLocalStream?: (stream: MediaStream) => void;\n  onCallFailed?: (reason: string) => void;\n\n  constructor() {\n    this.setupPeerConnection();\n  }\n\n  private setupPeerConnection() {\n    this.peerConnection = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' }\n      ]\n    });\n\n    this.peerConnection.onicecandidate = (event) => {\n      if (event.candidate && this.currentCallId) {\n        this.sendSignalingMessage({\n          type: 'ice-candidate',\n          callId: this.currentCallId,\n          candidate: event.candidate\n        });\n      }\n    };\n\n    this.peerConnection.ontrack = (event) => {\n      this.remoteStream = event.streams[0];\n      this.onRemoteStream?.(this.remoteStream);\n    };\n  }\n\n  connect(userId: string) {\n    this.userId = userId;\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws-signaling`;\n    \n    this.ws = new WebSocket(wsUrl);\n    \n    this.ws.onopen = () => {\n      console.log('WebSocket connected');\n      this.sendSignalingMessage({\n        type: 'register',\n        userId\n      });\n    };\n\n    this.ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      this.handleSignalingMessage(message);\n    };\n\n    this.ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      // Attempt to reconnect after 3 seconds\n      setTimeout(() => {\n        if (this.userId) {\n          this.connect(this.userId);\n        }\n      }, 3000);\n    };\n\n    this.ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  }\n\n  private async handleSignalingMessage(message: any) {\n    switch (message.type) {\n      case 'call-initiated':\n        this.currentCallId = message.callId;\n        break;\n\n      case 'incoming-call':\n        this.currentCallId = message.callId;\n        this.onIncomingCall?.({\n          callId: message.callId,\n          callerId: message.callerId,\n          callerName: message.callerName,\n          callType: message.callType\n        });\n        \n        // Set remote description from offer\n        if (this.peerConnection && message.offer) {\n          await this.peerConnection.setRemoteDescription(new RTCSessionDescription(message.offer));\n        }\n        break;\n\n      case 'call-answered':\n        if (this.peerConnection && message.answer) {\n          await this.peerConnection.setRemoteDescription(new RTCSessionDescription(message.answer));\n          this.onCallAnswered?.();\n        }\n        break;\n\n      case 'call-rejected':\n        this.currentCallId = null;\n        this.onCallRejected?.();\n        this.cleanup();\n        break;\n\n      case 'call-ended':\n        this.currentCallId = null;\n        this.onCallEnded?.(message.reason);\n        this.cleanup();\n        break;\n\n      case 'call-failed':\n        this.currentCallId = null;\n        this.onCallFailed?.(message.reason);\n        this.cleanup();\n        break;\n\n      case 'ice-candidate':\n        if (this.peerConnection && message.candidate) {\n          await this.peerConnection.addIceCandidate(new RTCIceCandidate(message.candidate));\n        }\n        break;\n    }\n  }\n\n  async startCall(receiverId: string, callType: 'voice' | 'video', callerName: string) {\n    try {\n      // Get user media\n      this.localStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: callType === 'video'\n      });\n\n      this.onLocalStream?.(this.localStream);\n\n      // Add tracks to peer connection\n      this.localStream.getTracks().forEach(track => {\n        this.peerConnection!.addTrack(track, this.localStream!);\n      });\n\n      // Create offer\n      const offer = await this.peerConnection!.createOffer();\n      await this.peerConnection!.setLocalDescription(offer);\n\n      // Send offer through signaling\n      this.sendSignalingMessage({\n        type: 'call-offer',\n        receiverId,\n        offer,\n        callType,\n        callerName\n      });\n\n    } catch (error) {\n      console.error('Error starting call:', error);\n      this.onCallFailed?.('Failed to access media devices');\n    }\n  }\n\n  async answerCall(callId: string, callType: 'voice' | 'video') {\n    try {\n      // Get user media\n      this.localStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: callType === 'video'\n      });\n\n      this.onLocalStream?.(this.localStream);\n\n      // Add tracks to peer connection\n      this.localStream.getTracks().forEach(track => {\n        this.peerConnection!.addTrack(track, this.localStream!);\n      });\n\n      // Create answer\n      const answer = await this.peerConnection!.createAnswer();\n      await this.peerConnection!.setLocalDescription(answer);\n\n      // Send answer through signaling\n      this.sendSignalingMessage({\n        type: 'call-answer',\n        callId,\n        answer\n      });\n\n    } catch (error) {\n      console.error('Error answering call:', error);\n      this.rejectCall(callId);\n    }\n  }\n\n  rejectCall(callId: string) {\n    this.sendSignalingMessage({\n      type: 'call-reject',\n      callId\n    });\n    this.currentCallId = null;\n    this.cleanup();\n  }\n\n  endCall() {\n    if (this.currentCallId) {\n      this.sendSignalingMessage({\n        type: 'call-end',\n        callId: this.currentCallId\n      });\n    }\n    this.currentCallId = null;\n    this.cleanup();\n  }\n\n  toggleMute() {\n    if (this.localStream) {\n      const audioTracks = this.localStream.getAudioTracks();\n      audioTracks.forEach(track => {\n        track.enabled = !track.enabled;\n      });\n      return !audioTracks[0]?.enabled;\n    }\n    return false;\n  }\n\n  toggleVideo() {\n    if (this.localStream) {\n      const videoTracks = this.localStream.getVideoTracks();\n      videoTracks.forEach(track => {\n        track.enabled = !track.enabled;\n      });\n      return !videoTracks[0]?.enabled;\n    }\n    return false;\n  }\n\n  private sendSignalingMessage(message: any) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    }\n  }\n\n  private cleanup() {\n    // Stop local stream\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => track.stop());\n      this.localStream = null;\n    }\n\n    // Close peer connection\n    if (this.peerConnection) {\n      this.peerConnection.close();\n      this.setupPeerConnection(); // Create new one for next call\n    }\n\n    this.remoteStream = null;\n  }\n\n  disconnect() {\n    this.cleanup();\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}\n\nexport const webrtcService = new WebRTCService();","size_bytes":7302}},"version":1}